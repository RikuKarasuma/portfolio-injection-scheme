<?xml version="1.0" encoding="UTF-8"?>
<project>
	<name>BitRunner</name>
	<header></br><center><img src="images/bit-runner/bit-runner-logo-small.png" width="600px" style="border-radius:20px;"/></center><span style="display:block;text-align:center;">Main menu background.</span><center><h1 id="index">Index</h3><a href="#intro">Intro</a></br><a href="#engine">Engine</a></br><a href="#main_menu">Main Menu</a></br><a href="#settings_menu">Settings Menu</a></br><a href="#playing">Playing</a></br></center></br></br></br></header>
	<body><h3 id="intro">What is BitRunner?</h3><p> BitRunner is a 2D Windows and Linux score orientated endless runner game. I was hired back in 2014 by a company called CoinBitsy to design and develop their flagship game. They described their vision to me and I set out to develop this prototype.</p><h3>Features</h3><p> BitRunner has multiple levels, difficulties and an original soundtrack by Stephen Devlin. The game has simple controls suchs as jump, roll and sprint. The main concept was about timing, avoiding obsticles and gathering as many coins as you can before you die.</p><h3>Stage</h3><p> The game unfortunately never left the beta stage. After two months of development, it was shaping up well and I had the go ahead to start developing the CoinBitsy website platform which was going to contain the game leaderboards and serve adverts. Sadly, due to poor management issues and five months of grueling work, the company disbanded, leaving this game as a relic to their vision.</p><h3>Support</h3><p> There is no support or continued development on this game. Maybe in future I will revisit it and release it as shareware. However for now, it sits gathering entropy in my hard disk.</p><h3>Roles, responsibilities & challenges</h3><p> My role in the company and this project was lead developer and project manager. I was responsible for programming, QA, level design, graphic design and ensuring the project stayed on schedule. The challenges were numerous and difficult. Animation cohesion was tough as well as managing the many different states/mechanics the game had such as collision detection.</p><p> The biggest challenge of all was the timeframe. Every week I plotted and assigned the tasks that I and my team was going to try and achieve for that week and bringing over the tasks we didn"t finish the week before. The game was estimated for three months, there was of course many more features planned that we didn"t get to finish. Those were the ones that required a server platform that was going to be the CoinBitsy website.</p></br><hr><h2>BitRunner</h2></br><center id="engine"><a href="images/firebolt/firebolt-logo-small.png"><img alt="BitRunner Game Engine" src="images/firebolt/firebolt-logo-small.png" width="600px" style="border-radius:20px;"/></a></center><h3>Engine</h3><p> BitRunner is built upon an engine that I created some years ago while working on my side project Conquest Of Nerath called Firebolt. Version 1.0 of the engine is based on the Slick2D framework, which is an extension of OpenGL bindings for Java(LWJGL). This ensures games created on the engine can be used on Windows and Linux. It might work on Mac OS too, although I have not tested that assumption. Later the engine was ported to libGDX for Version 2.0, this was to ensure portability on mobile devices such as IOS and Android. BitRunner uses version 1.0 of the engine as version 2.0 was not created until after BitRunner.</p><center><a href="images/bit-runner/bit-runner-graphics-menu.png"><img alt="BitRunner Game Engine" src="images/bit-runner/bit-runner-graphics-menu.png"/></a></center><p> This is the graphics option menu. It pops up before the game starts. Here you can select from multiple graphics options such as Anti Aliasing, V Sync, Resolution, Aspect Ratio and whether or not the game is fullscreen. All these options make a more customizable game experience for the end user.</p><p> Firebolt engine also allows users to add their own soundtracks to the game, as long as they are WAV or OGG format. These tracks will supplant the original game music though.</p><a href="#index">Back to index</a></br><hr></br><center id="main_menu">><a href="images/bit-runner/bit-runner-main-menu.png"><img alt="BitRunner Main Menu" src="images/bit-runner/bit-runner-main-menu.png" width="600px"/></a></center><h3>Main Menu</h3><p> The main menu is the entrance point of the game. It allows you to choose your level, adjust the games settings and then play, not necessarily in that order.</p><p> Bitman(The Avatar), runs constantly at the bottom left, this provides a seemless transition from the main menu to the game playing once the play button is pressed as the game is already loaded before you reach the main menu.</p><p> At the bottom left you can choose from one of the eight levels available to the player.</p><a href="#index">Back to index</a></br><hr></br><center id="settings_menu"><a href="images/bit-runner/bit-runner-settings-menu.png"><img alt="BitRunner Settings Menu" src="images/bit-runner/bit-runner-settings-menu.png" width="600px"/></a></center><h3>Settings Menu</h3><p> This is the options menu. A bit lackluster I know but it is a simplistic game after all. The two options available are difficulty and sound, as in the current soundtrack playing.</p><p> The difficulty setting allows for controlling the speed which obsticles approach Bitman. There are three options, easy, normal and hardcore. Each one is drastically different in difficulty but will allow you to test yourself and how good you are getting at the game.</p><p> The sound option allows for the switching of four separate soundtracks. Once a track has ended another will be randomly chosen. When Bitman dies, you can go back to the settings menu and switch to the track you prefer. The tracks were composed by Steven Devlin.</p><a href="#index">Back to index</a></br><hr></br><center id="playing"><a href="images/bit-runner/bit-runner-playing.png"><img alt="BitRunner Playing" src="images/bit-runner/bit-runner-playing.png" width="600px"/></a></center><h3>Playing</h3><p> Here we have the game. We control Bitman by using W to jump, S to roll and D to sprint. At the top is the stats which record your current amount of collected coins and your total collected coins during the session.</p><p> You might be wondering why the obsticles are images of celebrities faces. We had them as just red squares beforehand. The manager thought it would be a funny idea to add them as an option. We never got around to adding the option slider though. Anyway, there are four positions from which the enemies/obsticles come flying at Bitman, some will require you to jump over or roll under them.</p><p> Once an enemy passes Bitman and exits the screen, it is destroyed. Then a new one is created offscreen to the far left and given a new random speed. The speed range depends on the difficultly. No more than four obsticles are allowed on screen at once, anymore than that and unescapable situations can occur.</p><p> The game uses a form of parallax scrolling to achieve the illusion of movement. Bitman doesn"t actually move(Unless you jump, then he winds back into his original position), instead it"s the background and obsticles that move. Once the sprint button is held, the speed of these objects increase, again giving the illusion of faster movement. This is a great way to avoid creating entire repetitive levels and thus saves on heap space and processing power because we don"t have to load everything at once or a bit at a time.</p><a href="#index">Back to index</a></br><hr></br></body>
	<tags>Java, OpenGL, Design, Engineering, Graphic Design, Windows, Linux, Overview</tags>
</project>
<project>
	<name>Android Cast</name>
	<header><center><img src="images/android-cast/android-cast-logo-small.png" width="600px" style="border-radius:20px;"/></center><span style="display:block;text-align:center;">Application logo.</span></br></br></br><center><h1 id="index">Index</h3><a href="#intro">Intro</a></br><a href="#client_discovery">Client: Discovery</a></br><a href="#client_login">Client: Login</a></br><a href="#client_playlist">Client: Playlist</a></br><a href="#client_search">Client: Search</a></br><a href="#client_controller">Client: Controller</a></br></br><a href="#server_main_menu">Server: Main Menu</a></br><a href="#server_settings_menu">Server: Settings Menu</a></br><a href="#server_out_of_process_player">Server: Out of Process Player</a></br><a href="#licensing_and_distribution">Licensing and Distribution</a></center></br></br></br></header>
	<body><h3 id="intro">Update (Jan 2017)</h3><p> This entire project has been rebranded and redesigned since this article was written. Couch Cast is the new brand and is split into four separate projects which displays the full extent of the project.</p><ul> <span class='js-gallery-menu-sub-item' onclick='subMenuItemClick(this)'>Couch Cast Server</span> <span class='js-gallery-menu-sub-item' onclick='subMenuItemClick(this)'>Couch Cast Client</span> <span class='js-gallery-menu-sub-item' onclick='subMenuItemClick(this)'>Couch Cast Website</span> <span class='js-gallery-menu-sub-item' onclick='subMenuItemClick(this)'>Couch Cast Version Center</span></ul><p>Please view the website <a href="http://www.couchcastapp.com">Couch Cast</a> or <a href="https://play.google.com/store/apps/details?id=eureka.net.couchcast">Store</a> page in order to see the current direction of the project. </p><h3>What is Android Cast?</h3><p> Android Cast is a Windows Media Server and Android Media Client. It is capable of allowing real time control of Media such as Movies, Shows and Music which makes the server perfect for bringing the computer to the living room essentially turning your computer into a TV and your Android Device into the remote.</p><h3>Features</h3><p> Android Cast has a robust feature list including real time file discovery, SHA384 password/login security, wireless media player and much more! Below I go through each major functionality that the server has, detailing what it can do.</p><h3>Stage</h3><p> At the moment, Android Cast is in beta and undergoing testing on various systems before I release it to the Android Market. The name "Android Cast" will most likely be changed before public release as well.</p><h3>Support</h3><p> The client and server is still in its infancy and is only version 1.1. There is still many features planned; because of this I plan to release it with a subscription model, so that support can continue in the future and it won"t be abandoned after release.</p></br><hr><h2>Android Cast Client</h2></br><center id="client_discovery"> <a href="images/android-cast/android-cast-server-list.png"><img alt="Client Server discovery" src="images/android-cast/android-cast-server-list.png" width="600px" style="border-radius:20px;"/> </a></center><h3>Client Server discovery</h3><p> Once the Android client has started, you will be presented with an empty playlist. If there is no previous session detected, you will have to use the connection menu available by swiping from the left corner or pressing the connection menu button on the top-left corner.</p><p> This will present you with a list of media servers by scanning your local area network using the Simple Service Discovery Protocol. This protocol requires that UPnP be enabled in your modem or it will not function.</p><p> Once you"ve found the Media Server you wish to connect to, tapping on the server name will bring you to the login screen which is explained in the next part.</p><a href="#index">Back to index</a></br><hr></br><center id="client_login"> <a href="images/android-cast/android-cast-server-login.png"><img alt="Client Server login" src="images/android-cast/android-cast-server-login.png" width="600px" style="border-radius:20px;"/> </a></center><h3>Client Server login</h3><p> After tapping on a Media Server that you wish to connect to, you will be presented with a login screen. This login screen requires your password in order to verify with the server (Default password is "password"). A password can be set up on the server if you wish to change the default, which is recommended.</p><p> Once the password has been inputted into the text area; clicking Confirm or Done buttons will attempt the connection with the Media Server. Once completed, the login screen will disappear and if the connection is successful, a little red "Connected" label will appear next to the server name on the server list like this.</p><center><img alt="Client Server connected" src="images/android-cast/android-cast-server-connected.png" style="border-radius:20px;"/></center><p> If the connection was not successful, a little pop up (Android OS Toast) will inform as to the reason why. There is two situational messages that will guide you to the problem. Here is the first and it will say "Not Authorised", this means that the password validation has failed and that the password you entered was incorrect.</p><center><img alt="Client Server not connected" src="images/android-cast/android-cast-server-not-connected-0.png" style="border-radius:20px;"/></center><p> The second message is more complicated and it states "Could not connect, server may not be running". This error message implies that there is a connection issue somewhere in the network and that it must be fixed before a connection can be made. Here is what it looks like.</p><center><img alt="Client Server not connected" src="images/android-cast/android-cast-server-not-connected-1.png" style="border-radius:20px;"/></center><a href="#index">Back to index</a></br><hr></br><center id="client_playlist"> <a href="images/android-cast/android-cast-media-playlist.png"><img alt="Client Server playlist" src="images/android-cast/android-cast-media-playlist.png" width="600px" style="border-radius:20px;"/> </a></center><h3>Client Server playlist</h3><p> This is the playlist of each media file found by the server. The server syncs the list in real time, whenever a new change has been detected in one of the monitored directories, a message is sent to the File Server which then relays the new list to the client for updating.</p><p> Since real time file searching and validation can take alot of CPU power, it takes a toll on lower end machines when searching through thousands of files. For this reason I"ve included an optional delay slider which allows for specifing a delay between folder searches. This helps keep the search algorithm scalable on weaker machines at the expense of faster file searching and validation. The slider is located within the settings menu of the server.</p><a href="#index">Back to index</a></br><hr></br><center id="client_search"> <a href="images/android-cast/android-cast-search-results.png"><img alt="Client search results" src="images/android-cast/android-cast-search-results.png" width="600px" style="border-radius:20px;"/> </a></center><h3>Client search results</h3><p> At the moment, there is only one linear playlist. This can make finding a single file within thousands of files a tedious task; so a search function was implemented. This search function takes an exact filename or phrase and returns any matches within a dialog list for selection.</p><a href="#index">Back to index</a></br><hr></br><center id="client_controller"> <a href="images/android-cast/android-cast-media-player.png"><img alt="Client Server media player controller" src="images/android-cast/android-cast-media-player.png" width="600px" style="border-radius:20px;"/> </a></center><h3>Client Server media player controller</h3><p> Here is where you control your media remotely. You have your standard controls such as Play, Pause, Rewind, Fast forward and Stop. The seeker bar at the top shows where the media time is currently located, you can also skip to whichever part of the media you want by moving the seeker thumb. The bottom seeker bar controls volume.</p><p> An extra function called Music Mode allows for the playing of media in the background. Once enabled the window will not be visible, this allows for seemless music playback without interruption while you"re still using the computer.</p><a href="#index">Back to index</a></br></br><hr><h2>Android Cast Server</h2></br><center id="server_main_menu"> <a href="images/android-cast/android-cast-server-main-menu.png"><img alt="Server main menu" src="images/android-cast/android-cast-server-main-menu.png" width="600px"/> </a></center><h3>Server main menu</h3><p> This is the main menu of the Android Cast Server application. Once started, the server exists in the background and can be accessed via the notification area on the taskbar. Clicking on the red icon shown below will open the menu you see above. This menu allows for playlist viewing, directory loading, help and server configuration.</p><center><img alt="Server taskbar service" src="images/android-cast/android-cast-server-taskbar-service.png" style="border-radius:20px;"/></center><p> The servers UI is kept simple in order to provide a good non intrusive user experience and tooltips are used to provide context for each component. The first button Load allows to load a directory of media files for just this session to the playlist. Settings, which we will delve deeper into next section, is where all the server configuration happens. Help opens up a help page that shows users how to use the media server. Finally Shutdown, exits the server and severs all client connections.</p><a href="#index">Back to index</a></br><hr></br><center id="server_settings_menu"> <a href="images/android-cast/android-cast-server-settings-menu.png"><img alt="Server settings menu" src="images/android-cast/android-cast-server-settings-menu.png" width="600px"/> </a></center><h3>Server settings menu</h3><p> Here is where all the server configuration happens. At the top we have the Monitored Directories section, it shows which folders are constantly monitored for media files and the playlist is a reflection of what is found here. If a change has been detected, for example a folder or media file has been moved or removed then the server will make the appropriate changes to the playlist then transmits the new changes to the connected clients.</p><p> The buttons below the monitored list are used to add new directories, remove old directories or clear the whole list. A slider is used to control the search pattern delay, the lowest delay will detect changes in real time. Of course not all computers will be able to handle real time searching, for the best results a quad core processor is required because of the servers multi-threaded nature. Regardless, the slider is there for the less powerful computers that don"t want their entire CPU consumed by the algorithm.</p><p> The server name is used as a label for discovery and is returned to the client during the SSDP search. Below the name text input is the password input here the default password can be changed, the password is used for logging into the server through a client.</p><p> These three checkboxs at the bottom are handy server functions which might help improve your experience with the server if they"re required. The first, Minimize Windows, if enabled everytime the play button is pressed or a new media file played will attempt to minimize every window on the desktop to ensure the media player receives focus, this is rarely needed but a nice option to have.</p><p> The second checkbox, Deep Search, if enabled it turns the search algorithm into a recursive search which will search every folder found within each monitored/loaded directory and will keep searching them until disabled. This is great if you don"t want to add each folder itself and lets the server do all the hard work. However this is an expensive operation and will require a powerful computer to keep on. If you"re experiencing slowdowns, this is the first option I"d target for optimum performance.</p><p> Music mode allows for playing media in the background, once enabled, the media window will not be visible. It can be made visible at any point simply by disabling music mode. This option can be enabled from the client for ease of use.</p><a href="#index">Back to index</a></br><hr></br><center id="server_out_of_process_player"> <a href="images/android-cast/android-cast-server-out-of-process-player.png"><img alt="Server settings menu" src="images/android-cast/android-cast-server-out-of-process-player.png" width="600px"/> </a></center><h3>Server Out of Process Player</h3><p> Here is where the magic happens. The server uses VLCJ to provide an implementation of libVLC, the famed open source media player. The media player implementation is a separate program from the server itself and thus labelled "Out of Process". Once the server receives a command to play a file, it bootstraps the OOP which then waits for the server to connect via a Interprocess socket. The OOP takes the media file info throug h the socket and uses it to play the media. An asynchronous I/O bridge is set up which allows the OOP to receive commands and pass information from VLCJ/LibVLC back through the server and then to each connected client.</p><p> You might be wondering why bother going with an Out of Process Player when it could"ve easily been added to the server without the interprocess coms. Well it wasn"t by choice that"s for sure and the player was originally part of the server executable as a whole. I found out pretty late on in development that VLCJ leaks a significant amount of memory (10MB~) everytime the same media player implmentation is used to play another file. I think it"s got something to do with native threads not being cleaned up correctly when in contact with LibVLC. Because of this, I couldn"t reuse the same created media player in memory over and over, I needed the memory to be forcibly released once the media was finished. The only way to do this was to have it as a separate running program unfortunately. This issue will likely never be fixed as it has been around for atleast two years and the author of VLCJ uses linux mostly and that OS is not showing the same bug.</p><a href="#index">Back to index</a></br><hr></br><h3 id="licensing_and_distribution">Licensing and distribution</h3><p> The server and OOP will be GPL as VLCJ and LibVLC are both open source and licensed under GPL3. This allows anyone to modify/distribute the server/oop source and installer. The code will be available online shortly free of charge. However, anyone wishing for the full development package, i.e resources, install scripts or documentation will be required to pay a small handling fee as the project is quite large and will take time to gather and distribute through the medium of your choice.</p><p> The client is exempt from this license as it is not distributed with the server/oop and does not use any GPL code, it simply provides interoperability to the server. It will be available on the Android Marketplace once the beta stage is completed.</p><a href="#index">Back to index</a></br><hr></br></body>
	<tags>Engineering, Design, Android, Windows, Java, Overview</tags>
</project>
<project>
	<name>Slideshow Menu</name>
	<header><br> <br> <br><center> <img src="images/slideshow-menu/slideshow-menu-logo.png" width="100%" style="border-radius:20px;"></center><center> <br> <br> <br><h1 id="index">Index</h1><a href="#intro">Intro</a><br> <a href="#how-its-done">How it's done</a><br> <a href="#server-side">Server side</a><br> <a href="#purpose">Purpose</a><br> <a href="https://github.com/RikuKarasuma/symbolic-hard-link-creator">Source</a><br> <br><h2>At the Source</h2> <a href="#start-of-script">Start of Script</a><br> <a href="#networking-ajax">Networking: AJAX call</a><br> <a href="#view-generation-components">View Generation Components</a><br> <a href="#controller-components">Controller Components</a><br> <a href="#animation-components">Animation Components</a><br> <a href="#data-model-components">Data Model Components</a><br> <a href="#mobile-detection">Mobile Detection</a><br></center> <br> <br> <br></header>
	<body><br><h2 id="intro">Intro</h2><p> Slideshow Menu is a Javascript library I created to generate a MVC pattern based on Tags. Actually as you're reading this. You're using it.</p><h2 id="how-its-done">How it's done</h2><p> On page load, the client makes a AJAX call requesting the Portfolio JSON from the server. From this JSON the Tags menu and sub menus are created and populated with Projects.</p><p> Which then, once a user selects a Project, the current content fades. Then the newly selected Project slides in from the left, unfading as it's iterating accross the page. Providing a nifty animation.</p><h3>Mobile</h3><p> This API was optimized for mobile devices/browsers. Unfortunately because of mobile limitations. The Roll Out animation had to be cut for performance reasons. Instead mobile versions have a Fade out, Fade in animation which doesn't tax the device.</p><h2 id="server-side">Server side</h2><p> An XML file handles the storage of each Project. A separated sister Project called the Portfolio Injection Scheme handles the server side.</p><p> To sum up the Project. The server reads the Portfolio XML every 15 minutes, parses it, converting the data to JSON. Finally storing the JSON on a REST GET endpoint. You can visit the link below for more in-depth details.</p><ul> <span class="js-gallery-menu-sub-item active" onclick="subMenuItemClick(this)">Portfolio Injection Scheme</span></ul><h3>Server type</h3><p> I use a Tomcat server to implement the REST functions necessary for this utility. This can be done with any other web server as well.</p><h2 id="purpose">Purpose</h2><p> This system was created so that potential employers can easily view which Projects contain relevant technology stacks.</p> <br> <br> <a href="#index">back to index</a> <br><hr> <br><h2 id="start-of-script">At the Source: Start of Script</h2> <br><div class="js-gallery-code"><pre> /*&#10; * Small Slide Show web application that retrieves JSON Project Information &#10; * from Server. Parses it. Then builds a categorical menu and subsequent sub &#10; * menus all based upon tags relevant to each Project. &#10; * &#10; * Designed for Desktop and Mobile devices. Optimised for Chrome, Opera, &#10; * Firefox, Edge and Mobile versions. IE is unsupported. &#10; * &#10; * @author Owen McMonagle.&#10; * @version 0.3 &#10; */&#10; &#10; // ******************************* Global components Begin *********************************************&#10; const OPACITY_INCREMENT = 0.1;&#10; const OPACITY_MULTIPLIER = 100;&#10; const ITEM_CLASS_ACTIVE = &#x22;active&#x22;;&#10; // Selected Portfolio Items.&#10; let selectedElements = [];&#10; // Selected project name.&#10; let selectedName = &#x22;&#x22;;&#10; // JSON portfolio data.&#10; let data = null;&#10; // Transitioning flag.&#10; let transitioning = false;&#10; &#10; // ******************************* Script start up Begin ***********************************************&#10; &#10; //Build menus as soon as page load.&#10; window.addEventListener('load', requestPortfolioJSON(), false);&#10; &#10; //******************************* Script start up End ************************************************** </pre></div><p> Here is the start of our Javascript Library.</p><p> We declare our globals, then add an event listener to 'load'. This listener will initialize the API by making an AJAX call to the server requesting the Portfolio JSON. After which the Tags menu is built. Next we will see how the AJAX call is implemented.</p><p> Please follow code comments for more in-depth explanations of what the code does.</p> <br> <br> <a href="#index">back to index</a> <br><hr> <br><h2 id="networking-ajax">Networking component: AJAX call</h2> <br><div class="js-gallery-code"><pre> /** * Request the project data from the server in JSON format. Then proceeds to &#10; * build the menus. Starting point of the Slide Menu.&#10; */&#10; function requestPortfolioJSON()&#10; &#10;{ &#10;&#9;try &#10;&#9;{ &#10;&#9;&#9;// Make request Object. &#10;&#9;&#9;let portfolio_call = new XMLHttpRequest(); &#10;&#9;&#9;// Add state event listener &#10;&#9;&#9;portfolio_call.addEventListener(&#x22;readystatechange&#x22;, function() &#10;&#9;&#9;{ &#10;&#9;&#9;&#9;// If request is finished, response is ready and HTTP OK... &#10;&#9;&#9;&#9;if(this.readyState == 4 && this.status == 200) &#10;&#9;&#9;&#9;&#9;try &#10;&#9;&#9;&#9;&#9;{ &#10;&#9;&#9;&#9;&#9;&#9;// Parse retrieved JSON. &#10;&#9;&#9;&#9;&#9;&#9;data = JSON.parse(this.responseText); &#10;&#9;&#9;&#9;&#9;&#9;// Build Tags Menu with Data. &#10;&#9;&#9;&#9;&#9;&#9;buildMenu(); &#10;&#9;&#9;&#9;&#9;} &#10;&#9;&#9;&#9;&#9;catch(exception) &#10;&#9;&#9;&#9;&#9;{ &#10;&#9;&#9;&#9;&#9;&#9;alert(&#x22;Json parse or Tag Menu build error: &#x22; + exception); &#10;&#9;&#9;&#9;&#9;} &#10;&#9;&#9;}); &#10;&#9;&#9;// Attach REST GET link to request. &#10;&#9;&#9;portfolio_call.open('GET', 'portfolio-request'); &#10;&#9;&#9;// Make request. &#10;&#9;&#9;portfolio_call.send(null); &#10;&#9;} &#10;&#9;catch(exception) &#10;&#9;{ &#10;&#9;&#9;alert(&#x22;Portfolio request failed.&#x22;); &#10;&#9;} &#10;} </pre></div><p> This section of the API handles the retrieval of the Portfolio JSON from the server.</p><p> After which, the Portfolio JSON is used to build the Tag Category Menu and Portfolio Piece Sub Menus.</p><p> Please follow code comments for more in-depth explanations of what the code does.</p> <br> <br> <a href="#index">back to index</a> <br><hr> <br><h2 id="view-generation-components">View Generation components</h2> <br><div class="js-gallery-code"><pre> // ******************************* View Generation Components Begin ****************************** &#10; &#10;/** &#10; * Builds a menu from tags and places projects into each sub menu respective to &#10; * each tag. &#10; */ &#10;function buildMenu() &#10;{ &#10;&#9;const parent_node = document.getElementById(&#x22;js-gallery-tag-container&#x22;); &#10;&#9;const projects = getProjectData(); &#10;&#9;for( let i = 0; i < projects.length; i++) &#10;&#9;{ &#10;&#9;&#9;let menu_item = createItem(i, projects[i][0], (projects[i].length-1)); &#10;&#9;&#9;injectData(parent_node, menu_item); &#10;&#9;&#9;buildSubMenu(i, projects[i]); &#10;&#9;} &#10;} &#10; &#10;/** &#10; * Retrieves sub menu container and injects sub items into it from an array of &#10; * projects. &#10; * &#10; * @param index - Index of the parent menu item. &#10; * @param sub_menu_items - Each project with relevant tag to add to menu. &#10; */ &#10;function buildSubMenu(index, sub_menu_items) &#10;{ &#10;&#9;const sub_menu_container = document.getElementsByClassName(&#x22;js-gallery-menu-item-container&#x22;)[index]; &#10;&#9;for( let i = 1; i < sub_menu_items.length; i++) &#10;&#9;&#9;injectData(sub_menu_container, createSubItem(sub_menu_items[i])); &#10;} &#10; &#10;/** &#10; * Inject string into element while retaining current HTML. &#10; * &#10; * @param element - HTML Element to inject data into. &#10; * @param data - Project HTML to inject. &#10; */ &#10;function injectData(element, data) &#10;{ &#10;&#9;element.innerHTML += data; &#10;} &#10; &#10;/** &#10; * Creates menu HTML item. Requires menu index, name of category and number of &#10; * projects within. &#10; * &#10; * @param index - Index of Main Menu Item. &#10; * @param name - Name of the Menu item category. &#10; * @param item_length - Number of projects within Tag. &#10; * @returns HTML String representing a Main Tag Category. &#10; */ &#10;function createItem(index, name, item_length) &#10;{ &#10;&#9;return &#x22;&#x3C;span class='js-gallery-menu-item' onclick='menuItemClick(this,&#x22; + index + &#x22;)'>&#x22; + name + &#x22;(&#x22;+item_length+&#x22;)&#x3C;/span>&#x3C;div class='js-gallery-menu-item-container'>&#x3C;/div>&#x22;; &#10;} &#10; &#10;/** &#10; * Creates sub menu HTML item. Requires name. &#10; * &#10; * @param name - Name of project. &#10; * @returns HTML String representing a Project within a Tag category. &#10; */ &#10;function createSubItem(name) &#10;{ &#10;&#9;return &#x22;&#x3C;span class='js-gallery-menu-sub-item' onclick='subMenuItemClick(this)'>&#x22;+name+&#x22;&#x3C;/span>&#x22;; &#10;} &#10; &#10;// ******************************* View Generation Components End ******************************** </pre></div><p> This section of the API handles generating the View HTML.</p><p> After the Portfolio JSON has been retreived. The function buildMenu() is called. Which uses the data to create a Tag Category Menu and the corresponding Portfolio Sub Menus.</p><p> Within the created items are 'onclick' parameters which handle the Controller aspect from the client side. Next up is the Controller javascript code.</p><p> Please follow code comments for more in-depth explanations of what the code does.</p> <br> <br> <a href="#index">back to index</a> <br><hr> <br><h2 id="controller-components">Controller components</h2> <br><div class="js-gallery-code"><pre> // ******************************* Menu Controller Components Begin ****************************** &#10; &#10;/** &#10; * Menu on click function. Expands sub menus which are filled with &#10; * sub items which represent Portfolio Projects. &#10; * &#10; * @param element - Menu Item that was clicked upon. &#10; * @param index - Index of item on menu. Used to expand the sub menu. &#10; */ &#10;function menuItemClick(element, index) &#10;{ &#10;&#9;const is_sub_item = false; &#10;&#9;// Add or remove the active CSS on menu item. &#10;&#9;activateMenuItem(element, is_sub_item); &#10;&#9;// Display or hide drop down list associated with menu item. &#10;&#9;const elements = document.getElementsByClassName(&#x22;js-gallery-menu-item-container&#x22;); &#10;&#9;elements[index].style.display = elements[index].style.display == &#x22;block&#x22; ? &#x22;none&#x22; : &#x22;block&#x22;; &#10;} &#10; &#10;/** &#10; * Sub Menu on click function. Selects Portfolio Project. &#10; * &#10; * @param element - Sub menu item that was clicked upon. &#10; */ &#10;function subMenuItemClick(element) &#10;{ &#10;&#9;// Returns false if sub item is already activated. &#10;&#9;// If newly selected doesn't equal currently selected project name... &#10;&#9;if((element.innerText != selectedName) && !transitioning) &#10;&#9;{ &#10;&#9;&#9;// Add and/or remove the active CSS on all sub menu items. &#10;&#9;&#9;activateSubMenuItems(getAllSubItems(element.innerText)); &#10;&#9;&#9; &#10;&#9;&#9;// Grab element to fade and roll. &#10;&#9;&#9;const header = document.getElementById(&#x22;js-gallery-sub-container-1&#x22;); &#10;&#9;&#9;const body = document.getElementById(&#x22;js-gallery-sub-container-2&#x22;); &#10;&#9;&#9; &#10;&#9;&#9;// Get data to inject. &#10;&#9;&#9;let data_to_inject = search(element.innerText); &#10;&#9;&#9; &#10;&#9;&#9;// If data exists... &#10;&#9;&#9;if(data_to_inject != null) &#10;&#9;&#9;{ &#10;&#9;&#9;&#9;// Begin fade/slide transition. &#10;&#9;&#9;&#9;beginFadeTransition([header, body], [data_to_inject[0], data_to_inject[1]], [1060, 1060]); &#10;&#9;&#9;&#9;// Set title of new portfolio project. &#10;&#9;&#9;&#9;selectedName = element.innerText; &#10;&#9;&#9;&#9;document.getElementById(&#x22;item_title&#x22;).innerText = selectedName; &#10;&#9;&#9;&#9;return; &#10;&#9;&#9;} &#10;&#9;&#9; &#10;&#9;&#9;alert(&#x22;Portfolio item does not exist.&#x22;); &#10;&#9;} &#10;} &#10; &#10;/** &#10; * Deactivates already activated sub items, then proceeds to activate the sub &#10; * items that were just selected by the user. &#10; * &#10; * @param elements - HTML elements to activate once clicked upon. &#10; */ &#10;function activateSubMenuItems(elements) &#10;{ &#10;&#9;// if other sub items are already activated, deactivate them. &#10;&#9;if(selectedElements.length > 0) &#10;&#9;&#9;for(let i = 0; i < selectedElements.length; i ++) &#10;&#9;&#9;&#9;selectedElements[i].classList.remove(ITEM_CLASS_ACTIVE); &#10;&#9; &#10;&#9;const is_sub_item = true; &#10;&#9;// activate all sub items that were selected. &#10;&#9;for(let i = 0; i < elements.length; i ++) &#10;&#9;&#9;activateMenuItem(elements[i], is_sub_item); &#10;} &#10; &#10;/** &#10; * Activates/Deactivates a menu/sub-menu item by adding an extra class to it. &#10; * Only one sub item can be active at any one time. &#10; * &#10; * @param element - Element to activate/deactivate. &#10; * @param sub_item - Is Menu Item or Menu Sub Item. &#10; */ &#10;function activateMenuItem(element, sub_item) &#10;{ &#10;&#9;// if element is active. Remove active class. &#10;&#9;if(element.classList.contains(ITEM_CLASS_ACTIVE)) &#10;&#9;&#9;element.classList.remove(ITEM_CLASS_ACTIVE); &#10;&#9;// if element is not active. Add active class. &#10;&#9;else &#10;&#9;{ &#10;&#9;&#9;element.classList.add(ITEM_CLASS_ACTIVE); &#10;&#9;&#9;// if sub item.. &#10;&#9;&#9;if(sub_item) &#10;&#9;&#9;&#9;// set new activated sub item. &#10;&#9;&#9;&#9;selectedElements.push(element); &#10;&#9;} &#10;} &#10; &#10;/** &#10; * Searches for sub menu items with the same Project name that is passed. &#10; * &#10; * @param sub_item_name - Name of sub item element to find. &#10; * @returns Array of sub items with the passed name. &#10; */ &#10;function getAllSubItems(sub_item_name) &#10;{ &#10;&#9;// Get tag container. &#10;&#9;let menu_elements = document.getElementById(&#x22;js-gallery-tag-container&#x22;).children; &#10;&#9;// List to store sub menu items that are found. &#10;&#9;let sub_menu_items = []; &#10;&#9;// Iterate through menu items... &#10;&#9;for(let i = 2; i < menu_elements.length; i++) &#10;&#9;{ &#10;&#9;&#9;// Gather sub menu items into list. &#10;&#9;&#9;let sub_menu_elements = menu_elements[i].children; &#10;&#9;&#9;// iterate through sub menu items... &#10;&#9;&#9;for(let e = 0; e < sub_menu_elements.length; e++) &#10;&#9;&#9;&#9;// If sub menu item name equals the name we're looking for.. &#10;&#9;&#9;&#9;if(sub_menu_elements[e].innerText == sub_item_name) &#10;&#9;&#9;&#9;&#9;// Add found sub item to list. &#10;&#9;&#9;&#9;&#9;sub_menu_items.push(sub_menu_elements[e]); &#10;&#9;} &#10;&#9;// Return found sub menu items. &#10;&#9;return sub_menu_items; &#10;} &#10;// ******************************* Menu Controller Components End ******************************** </pre></div><p> This section of the API handles the Controller.</p><p> This Controller code is based upon the user selecting a Menu Item (Tag Category) or a Sub Menu Item (Project Piece). Menu Items call menuItemClick() and Sub Items call subMenuItemClick().</p><h3>Menu Item (Tag Category)</h3><p> Once a Menu Item is clicked upon, its corresponding Sub Menu container will be set to visible and expand. Revealing the relevant Sub Items.</p><h3>Sub Menu Item (Project Piece)</h3><p> Once a Sub Menu Item is clicked upon, this begins the animation and the newly selected Project data is injected.</p><p> If either is clicked, an 'active' class is added which signals on the UI that the Item or Sub Item has been activated. Specific to the Sub Items, all Projects with the same name will also gain the 'active' class.</p><p> Please follow code comments for more in-depth explanations of what the code does.</p> <br> <br> <a href="#index">back to index</a> <br><hr> <br><h2 id="animation-components">Animation components</h2> <br><div class="js-gallery-code"><pre> // ******************************* Fade/Slide in / out Components Begin ******************************** &#10; &#10;/** &#10; * Begins the fade out, slide in, fade in transition. &#10; * Designed to take Arrays so the same timer are used for all elements. &#10; * This effectively saves us a ton of optimisation. &#10; * &#10; * @param elements - HTML elements to animate. &#10; * @param data - Data to inject into the HTML element. &#10; * @param width_limits - Width limits of elements in order to calculate roll &#10; * out speed. &#10; */ &#10;function beginFadeTransition(elements, data, width_limits) &#10;{ &#10;&#9;// Set Animation Transitioning. &#10;&#9;transitioning = true; &#10;&#9;// Initial fad interval &#10;&#9;const fade_interval = 40; &#10;&#9;const opacity_limit = 0.1; &#10;&#9;let op = 1; // initial opacity &#10;&#9;let finished = false; &#10;&#9;let timer = setInterval(function () &#10;&#9;{ &#10;&#9;&#9;// Iterate over each element to fade out... &#10;&#9;&#9;for( let i = 0; i < elements.length; i ++) &#10;&#9;&#9;{&#9;&#9; &#10;&#9;&#9;&#9;// Once opacity hits fade out limit.. &#10;&#9;&#9;&#9;if (op <= opacity_limit) &#10;&#9;&#9;&#9;{ &#10;&#9;&#9;&#9;&#9;elements[i].style.display = 'none'; &#10;&#9;&#9;&#9;&#9;elements[i].innerHTML = &#x22;&#x22;; &#10;&#9;&#9;&#9;&#9;finished = true; &#10;&#9;&#9;&#9;} &#10;&#9;&#9;&#9;elements[i].style.opacity = op; &#10;&#9;&#9;&#9;elements[i].style.filter = 'alpha(opacity=' + op * OPACITY_MULTIPLIER + &#x22;)&#x22;; &#10;&#9;&#9;} &#10;&#9;&#9;// Decrease opacity. &#10;&#9;&#9;op -= op * OPACITY_INCREMENT; &#10;&#9;&#9; &#10;&#9;&#9;// If elements finished... &#10;&#9;&#9;if(finished) &#10;&#9;&#9;{ &#10;&#9;&#9;&#9;// Turn off timer. &#10;&#9;&#9;&#9;clearInterval(timer); &#10;&#9;&#9;&#9;// Is mobile device... &#10;&#9;&#9;&#9;if(isMobileDevice()) &#10;&#9;&#9;&#9;&#9;// Use Unfade animation instead. &#10;&#9;&#9;&#9;&#9;mobileUnfade(elements, data); &#10;&#9;&#9;&#9;else &#10;&#9;&#9;&#9;&#9;// Use normal animation. &#10;&#9;&#9;&#9;&#9;rollOutAndUnfade(elements, width_limits, data); &#10;&#9;&#9;} &#10;&#9;}, fade_interval); &#10;} &#10; &#10;/** &#10; * Handles the sliding out and unfading transition of HTML elements. &#10; * At the end the Data is injected into these elements. &#10; * &#10; * Can handle each parameter as an array provided they have &#10; * respective corresponding parameters. &#10; * &#10; * Handles each element with the same timer, iteratively. &#10; * &#10; * @param elements - HTML elements to roll out and unfade. &#10; * @param width_limits - Width limits of elements in order to calculate roll &#10; * out speed. &#10; * @param data - Data to inject into the HTML element. &#10; */ &#10;function rollOutAndUnfade(elements, width_limits, data) &#10;{ &#10;&#9;// Set up opacity and width variables. &#10;&#9;const opacity_limit = 1, interval_length = getIntervalTime(); &#10;&#9;let initial_width = 1, op = 0.1; &#10;&#9;let widths = []; &#10;&#9;let interval_index = 0; &#10;&#9;// Display element. &#10;&#9;let timer = setInterval(function () &#10;&#9;{ &#10;&#9;&#9;// Flag which lets us know when the elements are &#10;&#9;&#9;// finished expanding. &#10;&#9;&#9;let finished = true; &#10;&#9;&#9;// Increment through elements... &#10;&#9;&#9;for( let i = 0; i < elements.length; i ++) &#10;&#9;&#9;&#9;// If limits are reached... &#10;&#9;&#9;&#9;if(widths[i] >= width_limits[i]) &#10;&#9;&#9;&#9;&#9;setWidth(elements[i], width_limits[i]); &#10;&#9;&#9;&#9;else &#10;&#9;&#9;&#9;{ &#10;&#9;&#9;&#9;&#9;// Width increments. &#10;&#9;&#9;&#9;&#9;// If width is null... &#10;&#9;&#9;&#9;&#9;if(widths[i] == null) &#10;&#9;&#9;&#9;&#9;&#9;widths[i] = initial_width; &#10;&#9;&#9;&#9;&#9;// Set new increment. &#10;&#9;&#9;&#9;&#9;setWidth(elements[i], widths[i]); &#10;&#9;&#9;&#9;&#9;// Increment variable for next loop. &#10;&#9;&#9;&#9;&#9;widths[i] += (width_limits[i]/interval_length); &#10;&#9;&#9;&#9;&#9;// Opacity increments. &#10;&#9;&#9;&#9;&#9;elements[i].style.opacity = op; &#10;&#9;&#9;&#9;&#9;// Data Injection arguments &#10;&#9;&#9;&#9;&#9;if(interval_index == 0) &#10;&#9;&#9;&#9;&#9;{ &#10;&#9;&#9;&#9;&#9;&#9;injectData(elements[i], data[i]); &#10;&#9;&#9;&#9;&#9;&#9;elements[i].style.display = 'block'; &#10;&#9;&#9;&#9;&#9;} &#10;&#9;&#9;&#9;&#9;// If get to end we're not finished. &#10;&#9;&#9;&#9;&#9;finished = false; &#10;&#9;&#9;&#9;} &#10;&#9;&#9;// Opacity increments... &#10;&#9;&#9;op += OPACITY_INCREMENT; &#10;&#9;&#9; &#10;&#9;&#9;// If width or opacity limits of all objects are reached... &#10;&#9;&#9;if(finished) &#10;&#9;&#9;{ &#10;&#9;&#9;&#9;// End timer. &#10;&#9;&#9;&#9;clearInterval(timer); &#10;&#9;&#9;&#9;// Signal end of transitioning. &#10;&#9;&#9;&#9;transitioning = false; &#10;&#9;&#9;} &#10;&#9;&#9;interval_index ++; &#10;&#9;}, interval_length); &#10;} &#10; &#10;/** &#10; * A better transition animation for mobile devices. Only unfades instead &#10; * of rolling out the width. &#10; * &#10; * Can handle each parameter as an array provided they have &#10; * respective corresponding parameters. &#10; * &#10; * @param elements - HTML elements to unfade. &#10; * @param data - Data to inject into the HTML element. &#10; */ &#10;function mobileUnfade(elements, data) &#10;{ &#10;&#9;// Set up opacity and interval variables. &#10;&#9;const opacity_limit = 1, interval_length = getIntervalTime(); &#10;&#9;let op = 0.1; &#10;&#9;let interval_index = 0; &#10;&#9;// Display element. &#10;&#9;let timer = setInterval(function () &#10;&#9;{ &#10;&#9;&#9;// Flag which lets us know when the elements are &#10;&#9;&#9;// finished expanding. &#10;&#9;&#9;let finished = true; &#10;&#9;&#9;// Increment through elements... &#10;&#9;&#9;for( let i = 0; i < elements.length; i ++) &#10;&#9;&#9;&#9;if(op <= 1) &#10;&#9;&#9;&#9;{ &#10;&#9;&#9;&#9;&#9;// Opacity increments. &#10;&#9;&#9;&#9;&#9;elements[i].style.opacity = op; &#10;&#9;&#9;&#9;&#9;// Data Injection arguments &#10;&#9;&#9;&#9;&#9;if(interval_index == 0) &#10;&#9;&#9;&#9;&#9;{ &#10;&#9;&#9;&#9;&#9;&#9;injectData(elements[i], data[i]); &#10;&#9;&#9;&#9;&#9;&#9;elements[i].style.display = 'block'; &#10;&#9;&#9;&#9;&#9;} &#10;&#9;&#9;&#9;&#9;// If get to end we're not finished. &#10;&#9;&#9;&#9;&#9;finished = false; &#10;&#9;&#9;&#9;} &#10;&#9;&#9;// Opacity increments... &#10;&#9;&#9;op += OPACITY_INCREMENT/2; &#10;&#9;&#9;// If width or opacity limits of all objects are reached... &#10;&#9;&#9;if(finished) &#10;&#9;&#9;{ &#10;&#9;&#9;&#9;// End timer. &#10;&#9;&#9;&#9;clearInterval(timer); &#10;&#9;&#9;&#9;// Signal end of transitioning. &#10;&#9;&#9;&#9;transitioning = false; &#10;&#9;&#9;} &#10;&#9;&#9;interval_index ++; &#10;&#9;}, interval_length); &#10;} &#10; &#10;/** &#10; * Retrieves interval time. The time varies depending on whether the user &#10; * is a mobile or desktop device. If desktop device, time varies between &#10; * Firefox and the others remain the same. &#10; * &#10; * &#9;Mobile: 50ms. For fade/unfade. &#10; * &#9;Desktop: 10ms. For Chrome, Opera etc fade, slide and unfade. &#10; * &#9;Firefox: 35ms. For slide and unfade. &#10; * &#10; * @returns Interval time for Slideshow animation. &#10; */ &#10;function getIntervalTime() &#10;{ &#10;&#9;// Verify if user is mobile device... &#10;&#9;if(!isMobileDevice()) &#10;&#9;{ &#10;&#9;&#9;// if not check if the browser is Firefox... &#10;&#9;&#9;// if user is firefox, increase interval time &#10;&#9;&#9;// If other browser leave as default. &#10;&#9;&#9;return ((navigator.userAgent.search(&#x22;Firefox&#x22;) > -1) ? 35 : 10); &#10;&#9;} &#10;&#9;else &#10;&#9;&#9;// if mobile device, set unfade interval. &#10;&#9;&#9;return 50; &#10;} &#10; &#10;/** &#10; * Sets the width of a HTML element. &#10; * @param element - Element to set width of. &#10; * @param width - New width of element. &#10; */ &#10;function setWidth(element, width) &#10;{ &#10;&#9;element.style.width = width + &#x22;px&#x22;; &#10;} &#10; &#10;// ******************************* Fade/Slide in / out Components End ********************************** </pre></div><p> This section of the API handles the HTML Element Animation.</p><p> Each function handles a specific part of the animation detailed by the comments above the respective function. To begin the animation. Only one function need be called. That function is called beginFadeTransition(). Once this function is called, the decision flow will be determined by a Mobile or Desktop device. Which will be retrieved from the UserAgent of the browser.</p><p> The design of this animation manipulates the Opacity and the Width of the Elements to be Animated. With the exception of Mobile Devices which cannot handle iterating the Width.</p><p> Please follow code comments for more in-depth explanations of what the code does.</p> <br> <br> <a href="#index">back to index</a> <br><hr> <br><h2 id="data-model-components">Data Model components</h2> <br><div class="js-gallery-code"><pre> // ******************************* Data Model Components Begin *********************************** &#10; &#10;/** &#10; * Uses retrieved JSON data to build arrays which will be injected into the menu &#10; * the build system. Each project is sorted according to tag. Then fitted into a &#10; * 2D array. So what is returned is an Array of Project Arrays sorted by project &#10; * tag. &#10; * &#10; * @returns Array of Project Arrays sorted by Tag. &#10; */ &#10;function getProjectData() &#10;{ &#10;&#9;let tags = []; &#10;&#9;let projects = []; &#10;&#9;// Iterate over each project... &#10;&#9;for( let i = 0; i < data.projects.length; i++) &#10;&#9;{ &#10;&#9;&#9;// Store each project. &#10;&#9;&#9;let project = data.projects[i]; &#10;&#9;&#9;projects.push(project); &#10;&#9;&#9;// Iterate over each tag within the project... &#10;&#9;&#9;for( let e = 0; e < project.tags.length; e++) &#10;&#9;&#9;{ &#10;&#9;&#9;&#9;// Store each tag. &#10;&#9;&#9;&#9;let tag = project.tags[e]; &#10;&#9;&#9;&#9;if(!contains(tags, tag)) &#10;&#9;&#9;&#9;&#9;tags.push(tag); &#10;&#9;&#9;} &#10;&#9;} &#10;&#9;// Sort the tags alphabetically. &#10;&#9;tags.sort(); &#10;&#9;// Create project data which will enable us to build our menus. &#10;&#9;let project_data = []; &#10;&#9;for( let i = 0; i < tags.length; i++) &#10;&#9;&#9;project_data.push(createTagArray(tags[i], projects)); &#10;&#9; &#10;&#9;return project_data; &#10;} &#10; &#10;/** &#10; * Iterates through each project searching for tag matches. Once a match is &#10; * found it is added to a list to be returned once finished. &#10; * &#10; * @param tag - Tag to sort array by. &#10; * @param projects - Projects to sift through. &#10; * @returns Array of Projects sorted by Tag. &#10; */ &#10;function createTagArray(tag, projects) &#10;{ &#10;&#9;let relevant_projects = [tag]; &#10;&#9;// Iterate over each project... &#10;&#9;for(let i = 0; i < projects.length; i++) &#10;&#9;&#9;// if project contains tag... &#10;&#9;&#9;if(contains(projects[i].tags, tag)) &#10;&#9;&#9;&#9;// Store project as relevant to respective tag. &#10;&#9;&#9;&#9;relevant_projects.push(projects[i].name); &#10; &#10;&#9;return relevant_projects; &#10;} &#10; &#10;/** &#10; * Iterates through a list looking for a match to the passed object. &#10; * &#10; * @param list - List to search through. &#10; * @param object - Object to compare to. &#10; * @returns True if list contains Object. False otherwise. &#10; */ &#10;function contains(list, object) &#10;{ &#10;&#9;for( let i = 0; i < list.length; i++) &#10;&#9;&#9;if(list[i] === object) &#10;&#9;&#9;&#9;return true; &#10;&#9; &#10;&#9;return false; &#10;} &#10; &#10;/** &#10; * Returns the header and body information of a project via Array. &#10; * Requires project name. &#10; * &#10; * @param name - Name of the project to find. &#10; * @returns Array which contains header and body info respectively. &#10; */ &#10;function search(name) &#10;{&#9; &#10;&#9;for( let e = 0; e < data.projects.length; e++) &#10;&#9;&#9;if(data.projects[e].name == name) &#10;&#9;&#9;&#9;return [ data.projects[e].header, data.projects[e].body ]; &#10;&#9; &#10;&#9;return null; &#10;} &#10;// ******************************* Data Model Components End ************************************* </pre></div><p> This section of the API handles the Data Model components.</p><p> Here within getProjectData(), the JSON is parsed into Arrays that are sorted according to the relevant Project Technology Tag. Then returned to build the Menu Items (Tag Categories) and Sub Menu Items (Portfolio Pieces).</p><p> Some utility functions are here such contains and search. Which allow us to compare objects and search for Project data respectively.</p><p> Please follow code comments for more in-depth explanations of what the code does.</p> <br> <br> <a href="#index">back to index</a> <br><hr> <br><h2 id="mobile-detection">Mobile detection</h2> <br><div class="js-gallery-code"><pre> &#10;/** &#10; * Checks if user is browsing within a mobile device. Namely Windows, Android &#10; * and IOS. &#10; * &#10; * @returns True if Windows, Android or IOS mobile device. &#10; */ &#10;function isMobileDevice() &#10;{ &#10;&#9;let user_agent = navigator.userAgent || navigator.vendor || window.opera; &#10; &#10;&#9;// Windows. &#10;&#9;if (/windows phone/i.test(user_agent)) &#10;&#9;&#9;return true; &#10; &#10;&#9;// Android. &#10;&#9;if (/android/i.test(user_agent)) &#10;&#9;&#9;return true; &#10;&#9; &#10;&#9;// IOS. &#10;&#9;if (/iPad|iPhone|iPod/.test(user_agent) && !window.MSStream) &#10;&#9;&#9;return true; &#10;&#9; &#10;&#9;return false; &#10;} &#10; </pre></div><p> Here we use this function to determine certain decision flows within the library. If the user is a mobile device, we must cut back on iteration intensity. <br> We do this by cutting out the 'rolling across the screen by increasing width incrementally'. By doing this no lag is experienced on low end mobile devices (Device Circa 2014-15).</p><p> Using the UserAgent property we are able to determine the identity of the OS.</p><p> Please follow code comments for more in-depth explanations of what the code does.</p> <br> <br> <a href="#index">back to index</a> <br> <br></body>
	<tags>JSON, HTML/CSS, Javascript, AJAX, REST, Design</tags>
</project>
<project>
	<name>Portfolio Injection Scheme</name>
	<header><br> <br> <br><center> <img src="images/portfolio-injection-scheme/portfolio-injection-scheme-overview.png" width="100%" style="border-radius:20px;"></center><center> <br> <br> <br><h1 id="index">Index</h1><a href="#intro">Intro</a><br> <a href="#how-its-done">How it's done</a><br> <a href="#server-side">Server side</a><br> <a href="#purpose">Purpose</a><br> <a href="https://github.com/RikuKarasuma/symbolic-hard-link-creator">Source</a><br> <br><h2>At the Source</h2> <a href="#portfolio.xml">Portfolio.xml</a><br> <a href="#read-xml">Read XML</a><br> <a href="#convert-xml-to-json">Convert XML to JSON</a><br> <a href="#rest-get-endpoint">REST GET Endpoint</a><br></center> <br> <br> <br></header>
	<body><br><h2 id="intro">Intro</h2><p> The Portfolio Injection Scheme is a method of injecting portfolio projects into Software Eureka through the use of an XML file.</p><h2 id="how-its-done">How it's done</h2><p> Within the XML file. Each Portfolio project is defined with a "name", "header" and "body". The name is defined by a string and is used as the Identifier. The header and body expect HTML to structure the project data.</p><h2 id="server-side">Server side</h2><p> The XML file is read by the web server every 15 minutes. After which the XML is parsed and converted to JSON. Once converted it is stored as a global on a REST GET endpoint.</p><p> Whenever a user accesses the Portfolio page, an AJAX request retrieves the converted Portfolio JSON. This JSON is then used to populate a tag menu which allows the user to switch out Portfolio Items without making a page request for each.</p><h3>Server type</h3><p> I use a Tomcat server to implement the REST functions necessary for this utility. This can be done with any other web server as well.</p><h2 id="purpose">Purpose</h2><p> The purpose of this schema is to maintain portable data injection without the need to manage, sort and present a HTML file for each Portfolio Project.</p><p> This allows Javascript to modify and present each Project in a much more flexible manner.</p><p> Slideshow Menu, is the sister project and handles the javascript MVC side of things.</p><ul> <span class="js-gallery-menu-sub-item active" onclick="subMenuItemClick(this)">Slideshow Menu</span></ul> <br> <br> <a href="#index">back to index</a> <br> <br><h2 id="portfolio.xml">At the Source: Portfolio.xml</h2> <br><div class="js-gallery-code"><textarea readonly style="border-style:none;width:100%;height:310px;resize: none;"> <?xml version="1.0" encoding="UTF-8"?>&#10; &#x3C;project&#x3E;&#10; &#9;&#x3C;name&#x3E;Couch Cast Server&#x3C;/name&#x3E;&#10; &#9;&#x3C;header&#x3E;HTML&#x3C;/header&#x3E;&#10; &#9;&#x3C;body&#x3E;HTML&#x3C;/body&#x3E;&#10; &#9;&#x3C;tags&#x3E;Engineering, Design, Windows, Java&#x3C;/tags&#x3E;&#10; &#x3C;/project&#x3E;&#10; &#x3C;project&#x3E;&#10; &#9;&#x3C;name&#x3E;Couch Cast Client&#x3C;/name&#x3E;&#10; &#9;&#x3C;header&#x3E;HTML&#x3C;/header&#x3E;&#10; &#9;&#x3C;body&#x3E;HTML&#x3C;/body&#x3E;&#10; &#9;&#x3C;tags&#x3E;Engineering, Design, Android, Java, Google Play&#x3C;/tags&#x3E&#10; &#x3C;/project&#x3E;&#10; &#x3C;project&#x3E;&#10; &#9;&#x3C;name&#x3E;Couch Cast Version Center&#x3C;/name&#x3E;&#10; &#9;&#x3C;header&#x3E;HTML&#x3C;/header&#x3E;&#10; &#9;&#x3C;body&#x3E;HTML&#x3C;/body&#x3E;&#10; &#9;&#x3C;tags&#x3E;Engineering, Java, Tomcat, REST&#x3C;/tags&#x3E;&#10; &#x3C;/project&#x3E;&#10; </textarea></div><p> Here is an example template for the injection scheme.</p><h3>Name & Header</h3><p> As explained within the intro, the name is the Project Identifier. The Header, is separate from the Body and is supposed to be used to display a Project Image and Index all defined in HTML.</p><h3>Body</h3><p> The Body is the main HTML data structure and contains the referenced data stated previously within the Index.</p><h3>Tags</h3><p> Tags are used to sort each Project with respect to the Technologies used within said Project in the Javascript MVC stage. Each Tag is delimited by using a comma "&#44;".</p> <br> <br> <br> <a href="#index">back to index</a> <br> <br><h2 id="read-xml">Read XML</h2> <br><div class="js-gallery-code"><pre> import java.io.BufferedReader;&#10; import java.io.File;&#10; import java.io.FileInputStream;&#10; import java.io.IOException;&#10; import java.io.InputStreamReader;&#10; &#10; /** * Reads in XML from a file. Stores XML within StringBuffer for processing.&#10; * &#10; * @author Owen McMonagle.&#10; * @version 0.2&#10; * &#10; * @see CreatePortfolioJSON&#10; */&#10; public abstract class ReadXML&#10; {&#10; &#9;/**&#10; &#9; * StringBuffer to store XML.&#10; &#9; */&#10; &#9;private StringBuffer xml = null;&#10; &#9;&#10; &#9;/**&#10; &#9; * Taking in the XML file path. Stores XML within StringBuffer.&#10; &#9; * &#10; &#9; * @param file_path - Path to the XML file.&#10; &#9; */&#10; &#9;public ReadXML(String file_path)&#10; &#9;{&#10; &#9;&#9;// Read in XML.&#10; &#9;&#9;xml = read(file_path);&#10; &#9;}&#10; &#9;&#10; &#9;/**&#10; &#9; * Retrieves the XML string stored in a buffer.&#10; &#9; * @return Read in XML.&#10; &#9; */&#10; &#9;public StringBuffer getXML()&#10; &#9;{&#10; &#9;&#9;return xml;&#10; &#9;}&#10; &#9;&#10; &#9;/**&#10; &#9; * Reads in a XML line by line. Skipping the first. Returns read in&#10; &#9; * XML data as a StringBuffer for processing.&#10; &#9; * @param file_path - Path to XML file.&#10; &#9; * @return XML data.&#10; &#9; */&#10; &#9;private static StringBuffer read(final String file_path)&#10; &#9;{&#10; &#9;&#9;// Get file instance.&#10; &#9;&#9;final File xml_file = new File(file_path);&#10; &#9;&#9;// Buffer to store XML&#10; &#9;&#9;final StringBuffer read = new StringBuffer();&#10; &#9;&#9;FileInputStream stream;&#10; &#9;&#9;// File Reader.&#10; &#9;&#9;BufferedReader reader = null;&#10; &#9;&#9;try&#10; &#9;&#9;{&#10; &#9;&#9;&#9;// Open connection to file.&#10; &#9;&#9;&#9;stream = new FileInputStream(xml_file);&#10; &#9;&#9;&#9;// Create buffered stream reader.&#10; &#9;&#9;&#9;reader = new BufferedReader(new InputStreamReader(stream));&#10; &#9;&#9;&#9;// Skip first line which defines XML char set.&#10; &#9;&#9;&#9;reader.readLine();&#10; &#9;&#9;&#9;// String to store new line.&#10; &#9;&#9;&#9;String new_line = &#x22;&#x22;;&#10; &#9;&#9;&#9;// While each read in line is not empty...&#10; &#9;&#9;&#9;while((new_line = reader.readLine()) != null)&#10; &#9;&#9;&#9;&#9;// Store new line in buffer.&#10; &#9;&#9;&#9;&#9;read.append(new_line.trim());&#10; &#9;&#9;}&#10; &#9;&#9;catch(IOException e)&#10; &#9;&#9;{&#10; &#9;&#9;&#9;e.printStackTrace();&#10; &#9;&#9;}&#10; &#9;&#9;finally&#10; &#9;&#9;{&#10; &#9;&#9;&#9;// If XML file exists...&#10; &#9;&#9;&#9;if(xml_file != null)&#10; &#9;&#9;&#9;&#9;// Close stream reader.&#10; &#9;&#9;&#9;&#9;closeReader(reader);&#10; &#9;&#9;}&#10; &#9;&#9;&#10; &#9;&#9;// Return read in XML data.&#10; &#9;&#9;return read;&#10; &#9;}&#10; &#9;&#10; &#9;/**&#10; &#9; * Closes buffered stream reader. &#10; &#9; * &#10; &#9; * @param reader - Stream that reads XML file.&#10; &#9; */&#10; &#9;private static void closeReader(BufferedReader reader)&#10; &#9;{&#10; &#9;&#9;try&#10; &#9;&#9;{&#10; &#9;&#9;&#9;if(reader != null)&#10; &#9;&#9;&#9;&#9;reader.close();&#10; &#9;&#9;}&#10; &#9;&#9;catch(IOException e)&#10; &#9;&#9;{&#10; &#9;&#9;&#9;e.printStackTrace();&#10; &#9;&#9;}&#10; &#9;}&#10; }&#10; </pre></div><p> This class reads each line from the XML file and stores it within a StringBuffer. We inherit this class when we need to convert the XML to JSON.</p><p> Please refer to code comments for greater detail on function implementation.</p> <br> <br> <a href="#index">back to index</a> <br> <br> <br><h2 id="convert-xml-to-json">Convert XML to JSON String</h2> <br><div class="js-gallery-code"><pre> import java.util.ArrayList;&#10; import java.util.List;&#10; &#10; import xyz.eureka.software.Globals;&#10; &#10; /**&#10; * Converts Portfolio data defined in XML to JSON. Inherits from {@link ReadXML} &#10; * in order to read the XML file. &#10; * &#10; * &#10; * @author Owen McMonagle.&#10; * @version 0.4&#10; * &#10; * @see ReadXML&#10; * @see Globals&#10; */&#10; public final class CreatePortfolioJSON extends ReadXML&#10; {&#10; &#9;&#10; &#9;/**&#10; &#9; * Parses XML. Converts Project XML to JSON, then sets the JSON within&#10; &#9; * {@link Globals} for use on the REST end point at {@link GetPortfolio}.&#10; &#9; */&#10; &#9;public CreatePortfolioJSON()&#10; &#9;{&#10; &#9;&#9;super(Globals.getVisitorFilePath());&#10; &#9;&#9;// Define JSON start String. We use this to built the&#10; &#9;&#9;// JSON object Array.&#10; &#9;&#9;final String json_start = &#x22;{&#x22;projects&#x22;: [&#x22;;&#10; &#9;&#9;// Retrieve each Project XML. &#10; &#9;&#9;List<String> project = getProjects();&#10; &#9;&#9;// Print out number of projects.&#10; &#9;&#9;System.out.println(&#x22;Projects #&#x22;+project.size());&#10; &#9;&#9;// Add JSON start to the JSON StringBuffer.&#10; &#9;&#9;StringBuffer json_object_data = new StringBuffer();&#10; &#9;&#9;json_object_data.append(json_start);&#10; &#9;&#9;// Iterate to create and add each new JSON Project Object...&#10; &#9;&#9;for(int i = 0; i < project.size(); i++)&#10; &#9;&#9;&#9;try&#10; &#9;&#9;&#9;{&#10; &#9;&#9;&#9;&#9;// Get Project XML.&#10; &#9;&#9;&#9;&#9;String project_data = project.get(i);&#10; &#9;&#9;&#9;&#9;// If XML is not empty...&#10; &#9;&#9;&#9;&#9;if(!project_data.isEmpty())&#10; &#9;&#9;&#9;&#9;{&#10; &#9;&#9;&#9;&#9;&#9;// Add new JSON Project String.&#10; &#9;&#9;&#9;&#9;&#9;json_object_data.append(&#10; &#9;&#9;&#9;&#9;&#9;&#9;// Create JSON Object using passed parsed XML data.&#10; &#9;&#9;&#9;&#9;&#9;&#9;createJSONObject&#10; &#9;&#9;&#9;&#9;&#9;&#9;(&#10; &#9;&#9;&#9;&#9;&#9;&#9;&#9;// Parse XML Name.&#10; &#9;&#9;&#9;&#9;&#9;&#9;&#9;getName(project_data),&#10; &#9;&#9;&#9;&#9;&#9;&#9;&#9;// Parse XML Header&#10; &#9;&#9;&#9;&#9;&#9;&#9;&#9;getHeader(project_data),&#10; &#9;&#9;&#9;&#9;&#9;&#9;&#9;// Parse XML Body&#10; &#9;&#9;&#9;&#9;&#9;&#9;&#9;getBody(project_data),&#10; &#9;&#9;&#9;&#9;&#9;&#9;&#9;// Parse XML Tags&#10; &#9;&#9;&#9;&#9;&#9;&#9;&#9;getTags(project_data)&#10; &#9;&#9;&#9;&#9;&#9;&#9;));&#10; &#9;&#9;&#9;&#9;&#9;// If we are not at the end of the Project Array...&#10; &#9;&#9;&#9;&#9;&#9;if(i != (project.size()-1))&#10; &#9;&#9;&#9;&#9;&#9;&#9;// Add Comma after each added object.&#10; &#9;&#9;&#9;&#9;&#9;&#9;json_object_data.append(&#x22;,&#x22;);&#10; &#9;&#9;&#9;&#9;}&#10; &#9;&#9;&#9;}&#10; &#9;&#9;&#9;catch(Exception e)&#10; &#9;&#9;&#9;{&#10; &#9;&#9;&#9;&#9;e.printStackTrace();&#10; &#9;&#9;&#9;}&#10; &#9;&#9;// Add ending JSON to String.&#10; &#9;&#9;json_object_data += &#x22;]}&#x22;;&#10; &#9;&#9;// Set the new Portfolio Project JSON.&#10; &#9;&#9;Globals.setPortfolioJSON(json_object_data);&#10; &#9;}&#10; &#9;&#10; &#9;/**&#10; &#9; * Retrieves the XML read in by {@link ReadXML}. Then parses it by splitting&#10; &#9; * each project with the &#x22;&#x3C;/project&#x3E;&#x22; delimiter. Stores each Project inside&#10; &#9; * an ArrayList for returning.&#10; &#9; * &#10; &#9; * @return ArrayList filled with Projects in XML.&#10; &#9; */&#10; &#9;private ArrayList<String> getProjects()&#10; &#9;{&#10; &#9;&#9;// XML Project end tag.&#10; &#9;&#9;final String project_end = &#x22;&#x3C;/project&#x3E;&#x22;;&#10; &#9;&#9;// Get the read in XML data.&#10; &#9;&#9;final String xml_data = this.getXML().toString();&#10; &#9;&#9;// Split each Project using the &#x22;&#x3C;/project&#x3E;&#x22; delimiter.&#10; &#9;&#9;String[] split_data = xml_data.split(project_end);&#10; &#9;&#9;// List to store each Project&#10; &#9;&#9;ArrayList<String> parsed_projects = new ArrayList<>();&#10; &#9;&#9;// Iterate over split Project array...&#10; &#9;&#9;for(String data: split_data)&#10; &#9;&#9;&#9;// Add each split project to the ArrayList.&#10; &#9;&#9;&#9;parsed_projects.add(data);&#10; &#9;&#9;&#10; &#9;&#9;// Return projects.&#10; &#9;&#9;return parsed_projects;&#10; &#9;}&#10; &#9;&#10; &#9;/**&#10; &#9; * Extracts the name from the Project string.&#10; &#9; * @param project - XML data to extract from.&#10; &#9; * @return Extracted Project name.&#10; &#9; */&#10; &#9;private static String getName(String project)&#10; &#9;{&#10; &#9;&#9;final String project_start = &#x22;<name>&#x22;,&#10; &#9;&#9;&#9;&#9; project_end = &#x22;</name>&#x22;;&#10; &#9;&#9;return extract(project_start, project_end, project);&#10; &#9;}&#10; &#9;&#10; &#9;/**&#10; &#9; * Extracts the header HTML from the Project string.&#10; &#9; * @param project - XML data to extract from.&#10; &#9; * @return Extracted Project header HTML.&#10; &#9; */&#10; &#9;private static String getHeader(String project)&#10; &#9;{&#10; &#9;&#9;final String project_start = &#x22;&#x3C;header&#x3E;&#x22;,&#10; &#9;&#9;&#9;&#9;project_end = &#x22;&#x3C;/header&#x3E;&#x22;;&#9;&#10; &#9;&#9;return extract(project_start, project_end, project);&#10; &#9;}&#10; &#9;&#10; &#9;/**&#10; &#9; * Extracts the body HTML from the Project string.&#10; &#9; * @param project - XML data to extract from.&#10; &#9; * @return Extracted Project body HTML.&#10; &#9; */&#10; &#9;private static String getBody(String project)&#10; &#9;{&#10; &#9;&#9;final String project_start = &#x22;&#x3C;body&#x3E;&#x22;,&#10; &#9;&#9;&#9;&#9; project_end = &#x22;&#x3C;/body&#x3E;&#x22;;&#10; &#9;&#9;return extract(project_start, project_end, project);&#10; &#9;}&#10; &#9;&#10; &#9;/**&#10; &#9; * Extracts the tags from the Project string.&#10; &#9; * @param project - XML data to extract from.&#10; &#9; * @return Extracted Project tags.&#10; &#9; */&#10; &#9;private static String getTags(String project)&#10; &#9;{&#10; &#9;&#9;final String project_start = &#x22;&#x3C;tags&#x3E;&#x22;,&#10; &#9;&#9;&#9;&#9; project_end = &#x22;&#x3C;/tags&#x3E;&#x22;;&#10; &#9;&#9;return extract(project_start, project_end, project);&#10; &#9;}&#10; &#9;&#10; &#9;/**&#10; &#9; * Using a start and end Mark up tag. This function extracts a String &#10; &#9; * from within those two tags from with the Project String.&#10; &#9; * &#10; &#9; * @param start_tag - Start Mark up tag.&#10; &#9; * @param end_tag - End Mark up tag.&#10; &#9; * @param project - XML Project String. &#10; &#9; * @return Extracted data between the two past tags.&#10; &#9; */&#10; &#9;private static String extract(String start_tag, String end_tag, String project)&#10; &#9;{&#10; &#9;&#9;int start_index = project.indexOf(start_tag), end_index = project.indexOf(end_tag);&#10; &#9;&#9;String data = project.substring(start_index + start_tag.length(), end_index).trim();&#10; &#9;&#9;return verifyData(data);&#10; &#9;}&#10; &#9;&#10; &#9;/**&#10; &#9; * Creates a Portfolio JSON object with the passed parameters. &#10; &#9; * &#10; &#9; * @param name - Name of the Project.&#10; &#9; * @param header - Header HTML of the Project.&#10; &#9; * @param body - Body HTML of the Project.&#10; &#9; * @param tags - Sorting Tags of the Project.&#10; &#9; * @return Portfolio JSON Object String.&#10; &#9; */&#10; &#9;private static String createJSONObject(String name, String header, String body, String tags)&#10; &#9;{&#10; &#9;&#9;return (&#x22;{&#x22;name&#x22;: &#x22;&#x22;+name+&#x22;&#x22;, &#x22;header&#x22;: &#x22;&#x22;+header+&#x22;&#x22;, &#x22;body&#x22;: &#x22;&#x22;+body+&#x22;&#x22;,&#x22;tags&#x22;: [&#x22; + splitTags(tags) + &#x22;]}&#x22;);&#10; &#9;}&#10; &#9;&#10; &#9;/**&#10; &#9; * Splits up the Portfolio Project Tags then recreates them into a JSON compatible string.&#10; &#9; * @param tags - Project Tags.&#10; &#9; * @return Rebuilt JSON tags.&#10; &#9; */&#10; &#9;private static String splitTags(String tags)&#10; &#9;{&#10; &#9;&#9;// End of Tag offset. &#10; &#9;&#9;final byte offset = 1;&#10; &#9;&#9;// Split the Tags String using the comma delimiter.&#10; &#9;&#9;final String[] split_tags = tags.split(&#x22;,&#x22;);&#10; &#9;&#9;// String to rebuilt JSON Tags.&#10; &#9;&#9;String rebuilt_string = &#x22;&#x22;;&#10; &#9;&#9;// Iterate over Tags Array...&#10; &#9;&#9;for(int i = 0; i < split_tags.length; i++)&#10; &#9;&#9;&#9;// Rebuild Tags into JSON String.&#10; &#9;&#9;&#9;rebuilt_string += &#x22;&#x22;&#x22;+split_tags[i].trim()+&#x22;&#x22;&#x22; +&#10; &#9;&#9;&#9;// If we are not at the end of the array...&#10; &#9;&#9;&#9;// add comma.&#10; &#9;&#9;&#9;( (i != (split_tags.length-offset) ) ? &#x22;,&#x22; : &#x22;&#x22;);&#10; &#9;&#9;&#10; &#9;&#9;// Return built JSON string.&#10; &#9;&#9;return rebuilt_string;&#10; &#9;}&#10; &#9;&#10; &#9;/**&#10; &#9; * Replaces unsafe symbols to alternatives or safe entity types. Then returns&#10; &#9; * the safe string.&#10; &#9; * &#10; &#9; * @param data - String to make JSON safe. &#10; &#9; * @return Safe JSON String.&#10; &#9; */&#10; &#9;private static String verifyData(String data)&#10; &#9;{&#10; &#9;&#9;return data.replaceAll(&#x22;&#x22;&#x22;, &#x22;&#x27;&#x22;)&#10; &#9;&#9;.replaceAll(&#x22;/>&#x22;, &#x22; />&#x22;)&#10; &#9;&#9;.replaceAll(&#x22;\\&#x22;, &#x22;&#92;&#x22;)&#10; &#9;&#9;.replaceAll(&#x22;n&#x22;, &#x22;&#x22;)&#10; &#9;&#9;.replaceAll(&#x22;r&#x22;, &#x22;&#x22;);&#10; &#9;}&#10; }&#10; </pre></div><p> This class inherits ReadXML in order to extract the entire Portfolio XML from file. After which the XML is processed and the Portfolio Data is extracted. Then converted into JSON objects and stored within a StringBuffer for export to http clients.</p> <br> <br> <a href="#index">back to index</a> <br> <br> <br><h2 id="rest-get-endpoint">REST GET endpoint</h2> <br><div class="js-gallery-code"><pre> import java.io.IOException;&#10; import java.io.OutputStream;&#10; &#10; import javax.servlet.ServletException;&#10; import javax.servlet.http.HttpServlet;&#10; import javax.servlet.http.HttpServletRequest;&#10; import javax.servlet.http.HttpServletResponse;&#10; &#10; import xyz.eureka.software.Globals;&#10; &#10; /**&#10; * REST end point that passes Portfolio JSON String to client. Used within AJAX&#10; * call.&#10; * &#10; * @author Owen McMonagle.&#10; * @version 0.2&#10; * &#10; * @see Globals&#10; */&#10; public final class GetPortfolio extends HttpServlet &#10; {&#10; &#10; &#9;private static final long serialVersionUID = -4269222673475500522L;&#10; &#10; &#9;/**&#10; &#9; * Writes Portfolio JSON through {@link HttpServletResponse} stream in UTF-8.&#10; &#9; * @param req - Client HTTP Request.&#10; &#9; * @param resp - Client HTTP Response.&#10; &#9; */&#10; &#9;@Override&#10; &#9;protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#10; &#9;{&#10; &#9;&#9;// Set response as UTF.&#10; &#9;&#9;resp.setContentType(&#x22;Content-Type: application/json; charset=utf-8&#x22;);&#10; &#9;&#9;resp.setCharacterEncoding(&#x22;UTF-8&#x22;);&#10; &#9;&#9;OutputStream output = resp.getOutputStream();&#10; &#9;&#9;// Write Portfolio JSON to stream.&#10; &#9;&#9;output.write(Globals.getPortfolioJSON().toString().getBytes(&#x22;utf-8&#x22;));&#10; &#9;&#9;// Flush bytes down stream.&#10; &#9;&#9;output.flush();&#10; &#9;&#9;// Close stream.&#10; &#9;&#9;output.close();&#10; &#9;}&#10; } </pre></div><p> This REST getter sits on a URL to be used via AJAX call from the sister Project called Slideshow Menu. The Slideshow Menu is an MVC pattern created with Javascript which required the Portfolio Injection Scheme as a means of reliably extracting unique data from a Web Server.</p><p> Please visit the sister project 'Slideshow Menu' for a continuation of this Projects narrative.</p><ul> <span class="js-gallery-menu-sub-item active" onclick="subMenuItemClick(this)">Slideshow Menu</span></ul></body>
	<tags>Java, Engineering, Tomcat, XML, REST</tags>
</project>
<project>
	<name>Symbolic/Hard link Creator</name>
	<header><br><br><br><center><img src="images/symbolic-link-creator/symbolic-link-creator-heading.png" style="border-radius:20px;"></center><center> <br> <br> <br><h1 id="index">Index</h1><a href="#intro">Intro</a><br> <a href="#what-is-soft-link">What is a Soft Link?</a><br> <a href="#what-is-hard-link">What is a Hard Link?</a><br> <a href="#purpose">Purpose</a><br> <a href="https://github.com/RikuKarasuma/symbolic-hard-link-creator">Source</a><br> <br><h3>Using the App</h3> <a href="#hard-or-soft">Hard or Soft</a><br> <a href="#select-directories">Select Directory/ies</a><br> <a href="#select-directories">Select Director/ies to place Links</a><br> <a href="#completion">Completion</a><br> <br><h3>At the Source</h3> <a href="#source-hard-or-soft">Start Option Input</a><br> <a href="#source-link-process">Start Link Process</a><br> <a href="#source-get-user-input">Get User Input</a><br> <a href="#source-select-directory">Select Directory</a><br> <a href="#source-error-checks">Error checks</a><br> <a href="#source-drive-letters">Extract Drive Letters</a><br> <a href="#source-is-all-directories">Is all Directories</a><br> <a href="#source-get-paths-from-directories">Get Paths from Directories</a><br> <a href="#source-get-paths-from-directory">Get Paths from Directory</a><br> <a href="#source-create-linked-files">create Linked Files</a><br><br></center><br><br><br></header>
	<body><br><br><h2 id="intro">Intro</h2><p> The Symbolic Link Creator is a small shortcut creation utility which has the capacity to recursively create soft or hard links. Below I explain what are soft and hard links.</p><h2 id="what-is-soft-link">What is a Soft Link?</h2><p> A soft link is a file that represents a shortcut to a particular file or path.</p><h2 id="what-is-hard-link">What is a Hard Link?</h2><p> A hard link, like a soft link is a shortcut to a file. However, a hard link represents the file it is a shortcut to, fully. What this means is, a hard link would have the exact same characteristics as the file it is a shortcut to.</p><p> Eg. Whereas a soft link would only be a few kilobytes in size, the hard link is the exact same size as the file it is a shortcut to. Deleting the hard link also has no effect on the original.</p><h3>Limitations of Hard Links</h3><p> Due to hard links having the same characteristics as their original files. Hard links must be created on the same hard disk drive as the original files.</p><h3>Benefits of Hard Links</h3><p> Hard links mimic what they represent perfectly. That means: the name, icon, size, meta data and extension all match the original. All without duplicating the file size, so we also save on space.</p><h2 id="purpose">Purpose</h2><p> The purpose of this utility is to allow a user to select single/multiple folders. The program then scans for linkable files (Folder linking not supported yet) inside those folders and retrieves the file paths. Finally the user selects a directory to create the hard or soft links.</p><p> Basically you can create thousands of shortcuts in a matter of seconds. All automated, no right clicking for hours or pesky batch scripts.</p> <br> <a href="#index">back to index</a> <br> <br><h2 id="hard-or-soft">Using the App: Hard or Soft</h2> <br> <br> <br><center> <img src="images/symbolic-link-creator/symbolic-link-creator-hard-or-soft-links.png"></center> <br><p> On start up the utility presents a dialog asking which type of link you would like to create.</p> <br> <br> <br><h2 id="select-directories">Using the App: Select Directory/ies</h2> <br> <br> <br><center> <img src="images/symbolic-link-creator/symbolic-link-creator-select-directory-to-link.png"></center> <br><p> Once a type of link has been selected. This next dialog will ask to select a directory/ies to scan for files to link. After selected, click on the Save button to move on.</p> <br> <a href="#index">back to index</a> <br> <br><h2 id="select-directory">Using the App: Select Directory to place Links</h2> <br> <br> <br><center> <img src="images/symbolic-link-creator/symbolic-link-creator-select-directory-to-place-links.png"></center> <br><p> After a directory/ies has been chosen to link. This next dialog asks which directory to place the links.</p> <br> <br> <br><h2 id="completion">Using the App: Completion</h2> <br> <br> <br><center> <img src="images/symbolic-link-creator/symbolic-link-creator-completion.png"></center> <br><p> Finally after hitting save on the previous dialog. The file processing begins and the links are created through the Windows Runtime. Once completed, which shouldn't be very long, few seconds usually. The new links will appear in your chosen "selected directory to place links". After which a dialog will appear to display how many files have been processed.</p> <br> <a href="#index">back to index</a> <br> <br><h2 id="source-hard-or-soft">At the Source: Start Option Input</h2> <br> <br> <br><div class="js-gallery-code"><pre> public final class Creator&#10; {&#10; &#9;/**&#10; &#9;* Used to signify the user input soft or hard links.&#10; &#9;*/&#10; &#9;private static boolean softLinks = true;&#10; &#10; &#9;/**&#10; &#9;* Chosen parent directory to reopen after link selection.&#10; &#9;*/&#10; &#9;private static String choosenParentDirectory = &#x22;&#x22;;&#10; &#10; &#9;/**&#10; &#9;* Asks users which type of links they wish to create. Then proceeds to &#10; &#9;* directory selection.&#10; &#9;*/&#10; &#9;public static void main(String[] args)&#10; &#9;{&#10; &#9;&#9;// Ask user type of link.&#10; &#9;&#9;startOptionInput();&#10; &#9;&#9;// Ask user for directories to create links from.&#10; &#9;&#9;startLinkProcess();&#10; &#9;}&#10; &#10; &#9;/**&#10; &#9;* Creates an option dialog and asks the user which type of link to create&#10; &#9;* hard or soft.&#10; &#9;*/&#10; &#9;private static void startOptionInput()&#10; &#9;{&#10; &#9;&#9;// Define message strings&#10; &#9;&#9;final String title = &#x22;Symbolic/Hard Link Creator&#x22;,&#10; &#9;&#9;message = &#x22;Would you like softlinks or hardlinks?nHardlinks can only be used on the same Disk Drive!&#x22;;&#10; &#9;&#9;final String[] options = { &#x22;HardLinks&#x22;, &#x22;SoftLinks&#x22; };&#10; &#9;&#9;// Show popup dialog and get input.&#10; &#9;&#9;int action = JOptionPane.showOptionDialog(null, message, title, JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);&#10; &#9;&#9;// if action is 0, hard links was chosen...&#10; &#9;&#9;if(action == 0)&#10; &#9;&#9;&#9;softLinks = false;&#10; &#9;}&#10; </pre></div> <br><p> Start of the Symbolic Link Creator. Creates a dialog and asks the user which type of link they would like to create. Once selected, moves on to ask the user which folders to search for links. Refer to code comment for specifics.</p> <a href="#index">back to index</a> <br> <br> <br><h3 id="source-link-process">startLinkProcess()</h3> <br><div class="js-gallery-code"><pre> &#9;/**&#10; &#9;* Creates a dialog asking which directories to scan for links, validates&#10; &#9;* the input, retrieves the link paths, then creates a second dialog asking&#10; &#9;* where to place the links. After which the links are created and placed in.&#10; &#9;*/&#10; &#9;private static void startLinkProcess()&#10; &#9;{&#10; &#9;&#9;// Signal only one folder to be selected for link placement.&#10; &#9;&#9;final boolean multiple_selection_allowed = false;&#10; &#9;&#9;// Ask user which directories to create links from.&#10; &#9;&#9;// Then return the valid paths inside those folders.&#10; &#9;&#9;String[] paths = getUserInput();&#10; &#9;&#9;// Ask user which directory to place links.&#10; &#9;&#9;File link_directory = selectDirectory(&#x22;Select a directory to place the linked files...&#x22;, choosenParentDirectory, multiple_selection_allowed)[0];&#10; &#9;&#9;// Create hard/soft links inside a directory that the user selects.&#10; &#9;&#9;createLinkedFiles(link_directory, paths);&#10; &#9;}&#10; </pre></div> <br><p> Here is where the user is asked to select which directories to scan for files to link and then is asked which directory to place those links.</p><p> A number of functions aid in the gathering and validation of links which will be covered below, in as a sequentially a manner as possible.</p> <a href="#index">back to index</a> <br> <br> <br><h3 id="source-get-user-input">getUserInput()</h3> <br><div class="js-gallery-code"><pre> &#9;/**&#10; &#9;* Creates a dialog asking which directories to scan for links, validates&#10; &#9;* the input, retrieves the link paths.&#10; &#9;* @return paths to create links with.&#10; &#9;*/&#10; &#9;private static String[] getUserInput()&#10; &#9;{&#10; &#9;&#9;// Allow multiple selection of directories.&#10; &#9;&#9;final boolean multiple_selection_allowed = true;&#10; &#9;&#9;boolean valid_paths = false, same_drive_error = false;&#10; &#9;&#9;File[] directories_to_clone = null;&#10; &#9;&#9;String[] paths = null;&#10; &#9;&#9;ArrayList<String> drive_letters = null;&#10; &#9;&#9;do&#10; &#9;&#9;{&#10; &#9;&#9;&#9;// Ask user to select directory/s.&#10; &#9;&#9;&#9;directories_to_clone = selectDirectory(&#x22;Select a directory to link...&#x22;, &#x22;&#x22;, multiple_selection_allowed);&#10; &#9;&#9;&#9;// Get paths from directories.&#10; &#9;&#9;&#9;try&#10; &#9;&#9;&#9;{&#10; &#9;&#9;&#9;&#9;// Set directory to reopen after verification.&#10; &#9;&#9;&#9;&#9;choosenParentDirectory = directories_to_clone[0].getParent();&#10; &#9;&#9;&#9;&#9;// Get paths from chosen directories.&#10; &#9;&#9;&#9;&#9;paths = getPathsFromDirectories(directories_to_clone);&#10; &#9;&#9;&#9;&#9;// Create List in order to store drive letters.&#10; &#9;&#9;&#9;&#9;drive_letters = new ArrayList<>();&#10; &#9;&#9;&#9;&#9;// Populate list with drive letters from paths.&#10; &#9;&#9;&#9;&#9;extractDriveLetters(paths, drive_letters);&#10; &#9;&#9;&#9;&#9;// Validate selection.&#10; &#9;&#9;&#9;&#9;valid_paths = paths.length > 0;&#10; &#9;&#9;&#9;&#9;// If hard links...&#10; &#9;&#9;&#9;&#9;if(!softLinks)&#10; &#9;&#9;&#9;&#9;&#9;// calculate if there's more than one drive letter within paths.&#10; &#9;&#9;&#9;&#9;&#9;same_drive_error = drive_letters.size() > 1;&#10; &#9;&#9;&#9;}&#10; &#9;&#9;&#9;catch(NullPointerException e)&#10; &#9;&#9;&#9;{&#10; &#9;&#9;&#9;&#9;System.out.println(&#x22;Invalid selection.&#x22;);&#10; &#9;&#9;&#9;}&#10; &#9;&#9;&#9;valid_paths = errorChecks(valid_paths, same_drive_error);&#10; &#9;&#9;}&#10; &#9;&#9;while (!valid_paths);&#10; &#9;&#9;return paths;&#10; &#9;}&#10; </pre></div> <br><p> Creates a folder selection dialog which asks the user which directory/ies to scan for files to link. After selected, the paths are gathered and validated. If validated, the paths are returned, if not, the user is asked again.</p> <a href="#index">back to index</a> <br> <br><h3 id="source-select-directory">selectDirectory()</h3> <br><div class="js-gallery-code"><pre> &#9;/**&#10; &#9; * Creates a {@link JFileChooser} dialog to search for directories. Returns&#10; &#9; * selected directories.&#10; &#9; * @param title - Dialog title.&#10; &#9; * @param dir - Directory to start in.&#10; &#9; * @param multiple_selection - Allow multiple selection or not.&#10; &#9; * @return Selected directories.&#10; &#9; */&#10; &#9;private static File[] selectDirectory(String title, String dir, boolean multiple_selection)&#10; &#9;{&#10; &#9;&#9;if(title != null && dir != null)&#10; &#9;&#9;{&#10; &#9;&#9;&#9;JFileChooser file_chooser = new JFileChooser(dir);&#10; &#9;&#9;&#9;file_chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);&#10; &#9;&#9;&#9;file_chooser.setMultiSelectionEnabled(multiple_selection);&#10; &#9;&#9;&#9;file_chooser.setDialogTitle(title);&#10; &#9;&#9;&#9;final int action = file_chooser.showSaveDialog(null);&#10; &#9;&#9;&#9;if(action == JFileChooser.APPROVE_OPTION)&#10; &#9;&#9;&#9;{&#10; &#9;&#9;&#9;&#9;File[] directories = null;&#10; &#9;&#9;&#9;&#9;if(multiple_selection)&#10; &#9;&#9;&#9;&#9;&#9;directories = file_chooser.getSelectedFiles();&#10; &#9;&#9;&#9;&#9;else&#10; &#9;&#9;&#9;&#9;&#9;directories = new File[]{file_chooser.getSelectedFile()};&#10; &#9;&#9;&#9;&#9;&#10; &#9;&#9;&#9;&#9;if(isAllDirectorys(directories))&#10; &#9;&#9;&#9;&#9;&#9;return directories;&#10; &#9;&#9;&#9;}&#10; &#9;&#9;&#9;else if (action == JFileChooser.CANCEL_OPTION)&#10; &#9;&#9;&#9;&#9;System.exit(0);&#10; &#9;&#9;}&#9;&#10; &#9;&#9;return null;&#10; &#9;}&#10; </pre></div> <br><p> Function which asks the user to select a directory/ies and return the selected files. If the user cancels, the program is halted.</p> <a href="#index">back to index</a> <br> <br><h3 id="source-error-checks">errorChecks()</h3> <br><div class="js-gallery-code"><pre> &#9;/**&#10; &#9; * Checks for errors given the passed parameters. Returns whether or not&#10; &#9; * paths are still valid. &#10; &#9; * @param valid_paths - valid number of paths.&#10; &#9; * @param same_drive_error - valid number of drives.&#10; &#9; * @return True for valid paths, false otherwise.&#10; &#9; */&#10; &#9;private static boolean errorChecks(boolean valid_paths, boolean same_drive_error)&#10; &#9;{&#10; &#9;&#9;String error_msg = &#x22;&#x22;;&#10; &#9;&#9;&#10; &#9;&#9;// If the paths are invalid.&#10; &#9;&#9;if(!valid_paths)&#10; &#9;&#9;&#9;// Store invalid path error message.&#10; &#9;&#9;&#9;error_msg = &#x22;No paths or invalid paths selected!&#x22;;&#10; &#9;&#9;&#10; &#9;&#9;// If two drives exist in the selection with hard links enabled...&#10; &#9;&#9;if(same_drive_error)&#10; &#9;&#9;{&#10; &#9;&#9;&#9;// Store same drive error message.&#10; &#9;&#9;&#9;error_msg = &#x22;Hard links can only be placed on the same drive!&#x22;;&#10; &#9;&#9;&#9;valid_paths = false;&#10; &#9;&#9;}&#10; &#9;&#9;&#10; &#9;&#9;// Show error message.&#10; &#9;&#9;if(!valid_paths)&#10; &#9;&#9;&#9;JOptionPane.showMessageDialog(null, error_msg, &#x22;Invalid Selection&#x22;, JOptionPane.INFORMATION_MESSAGE);&#10; &#9;&#9;&#10; &#9;&#9;return valid_paths;&#10; &#9;}&#10; </pre></div> <br><p> Checks to see if any errors are to be thrown from the passed parameters. If the paths are not valid or multiple drives have been selected during a hard link process. A dialog will pop up informing the user.</p> <a href="#index">back to index</a> <br> <br><h3 id="source-drive-letters">extractDriveLetters()</h3> <br><div class="js-gallery-code"><pre> &#9;&#10; &#9;/**&#10; &#9; * Extracts drive letter from paths passed and populates the passed array list. &#10; &#9; * @param paths - Paths to create links from.&#10; &#9; * @param to_populate - List to populate with drive letters.&#10; &#9; */&#10; &#9;private static void extractDriveLetters(String[] paths, ArrayList<String> to_populate)&#10; &#9;{&#10; &#9;&#9;if(paths != null && to_populate != null)&#10; &#9;&#9;{&#10; &#9;&#9;&#9;// Clear list of previous drive letters.&#10; &#9;&#9;&#9;to_populate.clear();&#10; &#9;&#9;&#9;// String to store parsed drive letter.&#10; &#9;&#9;&#9;String sub_str = &#x22;&#x22;;&#10; &#9;&#9;&#9;// Iterate over paths...&#10; &#9;&#9;&#9;for(String path : paths)&#10; &#9;&#9;&#9;&#9;// If the path is not null, not empty and the list does not &#10; &#9;&#9;&#9;&#9;// already contain the drive letter...&#10; &#9;&#9;&#9;&#9;if(path != null && !path.isEmpty() && !to_populate.contains((sub_str = path.substring(0, 1))))&#10; &#9;&#9;&#9;&#9;&#9;// Then add to the drive letter list.&#10; &#9;&#9;&#9;&#9;&#9;to_populate.add(sub_str);&#10; &#9;&#9;}&#10; &#9;}&#10; </pre></div> <br><p> Checks to see if any errors are to be thrown from the passed parameters. If the paths are not valid or multiple drives have been selected during a hard link process. A dialog will pop up informing the user.</p> <a href="#index">back to index</a> <br> <br><h3 id="source-is-all-directories">isAllDirectories()</h3> <br><div class="js-gallery-code"><pre> &#9;/**&#10; &#9; * Checks if the passed files are directories.&#10; &#9; * @param directories - files to validate.&#10; &#9; * @return True if all are directories, false otherwise.&#10; &#9; */&#10; &#9;private static boolean isAllDirectories(File[] directories) &#10; &#9;{&#10; &#9;&#9;if(directories != null)&#10; &#9;&#9;&#9;// Iterate over directories...&#10; &#9;&#9;&#9;for(File directory : directories)&#10; &#9;&#9;&#9;&#9;// if file is not a directory return false.&#10; &#9;&#9;&#9;&#9;if(!directory.isDirectory())&#10; &#9;&#9;&#9;&#9;&#9;return false;&#10; &#9;&#9;return true;&#10; &#9;}&#10; </pre></div> <br><p> Validates that each passed file is a directory. If any is not, then false is returned. Used by selectDirectory() in order to validate user input.</p> <a href="#index">back to index</a> <br> <br><h3 id="source-get-paths-from-directories">getPathsFromDirectories()</h3> <br><div class="js-gallery-code"><pre> &#9;/**&#10; &#9; * Retrieves the paths of all files within the passed directories. Only files&#10; &#9; * are picked up, directories are not supported at this time.&#10; &#9; * @param directories - Folders to retrieve paths from.&#10; &#9; * @return Paths gathered. Returns Null if the directories is Null or if the&#10; &#9; * number of directories is zero.&#10; &#9; */&#10; &#9;private static String[] getPathsFromDirectories(File[] directories)&#10; &#9;{&#10; &#9;&#9;if(directories != null)&#10; &#9;&#9;{&#10; &#9;&#9;&#9;// Temporary List to store file paths.&#10; &#9;&#9;&#9;ArrayList<String> paths = new ArrayList<String>();&#10; &#9;&#9;&#9;// If the number of directories is greater than zero...&#10; &#9;&#9;&#9;if(directories.length > 0)&#10; &#9;&#9;&#9;{&#10; &#9;&#9;&#9;&#9;// Iterate over directories...&#10; &#9;&#9;&#9;&#9;for(File directory : directories)&#10; &#9;&#9;&#9;&#9;{&#10; &#9;&#9;&#9;&#9;&#9;// Get valid paths from directory.&#10; &#9;&#9;&#9;&#9;&#9;String[] paths_from_dir = getPathsFromDirectory(directory);&#10; &#9;&#9;&#9;&#9;&#9;if(paths_from_dir != null)&#10; &#9;&#9;&#9;&#9;&#9;&#9;// Iterate over files gathered..&#10; &#9;&#9;&#9;&#9;&#9;&#9;for(String path : paths_from_dir)&#10; &#9;&#9;&#9;&#9;&#9;&#9;&#9;// adding each to the list.&#10; &#9;&#9;&#9;&#9;&#9;&#9;&#9;paths.add(path);&#10; &#9;&#9;&#9;&#9;}&#10; &#9;&#9;&#9;&#9;// Return list as array.&#10; &#9;&#9;&#9;&#9;return paths.toArray(new String[paths.size()]);&#10; &#9;&#9;&#9;}&#10; &#9;&#9;}&#10; &#9;&#9;return null;&#10; &#9;}&#10; </pre></div> <br><p> Takes a passed File array and iterates over it, searching for file paths within each folder. Once gathered they are returned as a String array. Used by getUserInput() in order to retrieve the paths to the files that the user wishes to create links from.</p> <a href="#index">back to index</a> <br> <br><h3 id="source-get-paths-from-directory">getPathsFromDirectory()</h3> <br><div class="js-gallery-code"><pre> &#9;/**&#10; &#9; * Retrieves the absolute path of all file within a single directory that&#10; &#9; * is passed.&#10; &#9; * @param directory - Folder to retrieve paths from.&#10; &#9; * @return Paths gathered from folder. Returns null if directory is null&#10; &#9; * or if the number of files in the directory is zero.&#10; &#9; */&#10; &#9;private static String[] getPathsFromDirectory(File directory)&#10; &#9;{&#10; &#9;&#9;if(directory != null)&#10; &#9;&#9;{&#10; &#9;&#9;&#9;// Get files from directory&#10; &#9;&#9;&#9;File[] files = directory.listFiles();&#10; &#9;&#9;&#9;// If the number of files is greater that zero...&#10; &#9;&#9;&#9;if(files.length > 0 )&#10; &#9;&#9;&#9;{&#10; &#9;&#9;&#9;&#9;// Temporary List to store file paths.&#10; &#9;&#9;&#9;&#9;ArrayList<String> file_paths = new ArrayList<>();&#10; &#9;&#9;&#9;&#9;// Iterate over files...&#10; &#9;&#9;&#9;&#9;for(int i = 0; i < files.length; i++)&#10; &#9;&#9;&#9;&#9;&#9;// Confirm file is not a directory...&#10; &#9;&#9;&#9;&#9;&#9;if(!files[i].isDirectory())&#10; &#9;&#9;&#9;&#9;&#9;&#9;// If so store path in list.&#10; &#9;&#9;&#9;&#9;&#9;&#9;file_paths.add(files[i].getAbsolutePath());&#10; &#9;&#9;&#9;&#9;&#10; &#9;&#9;&#9;&#9;// Return list as array.&#10; &#9;&#9;&#9;&#9;return file_paths.toArray(new String[file_paths.size()]);&#10; &#9;&#9;&#9;}&#10; &#9;&#9;}&#10; &#9;&#9;return null;&#10; &#9;}&#10; </pre></div> <br><p> Takes a passed directory, retrieves its files and iterates over them, searching for files that are not directories and retrieving their paths. The paths are then returned as a String array. Integral part of getPathsFromDirectories().</p> <a href="#index">back to index</a> <br> <br><h3 id="source-create-linked-files">createLinkedFiles()</h3> <br><div class="js-gallery-code"><pre> &#9;/**&#10; &#9; * Creates hard or soft links with the passed parameters. Uses Command Prompt&#10; &#9; * on Windows in order to create the links. Shows information dialog once &#10; &#9; * completed.&#10; &#9; * @param directory - Folder to place links.&#10; &#9; * @param paths - Paths which represent the links to be created.&#10; &#9; */&#10; &#9;private static void createLinkedFiles(File directory, String[] paths)&#10; &#9;{&#10; &#9;&#9;if(directory != null && paths != null)&#10; &#9;&#9;{&#10; &#9;&#9;&#9;// Create mklink command string for use in CMD.&#10; &#9;&#9;&#9;// Set either hard of soft links here.&#10; &#9;&#9;&#9;String command = &#x22;mklink &#x22;+((softLinks) ? &#x22;&#x22; : &#x22;/H&#x22; )+&#x22; &#x22;&#x22;,&#10; &#9;&#9;&#9;&#9;&#9;// String to join command and path.&#10; &#9;&#9;&#9;&#9;&#9;joined_path_command = &#x22;&#x22;,&#10; &#9;&#9;&#9;&#9;&#9;// Directory to place files.&#10; &#9;&#9;&#9;&#9;&#9;directory_path = &#x22;&#x22;,&#10; &#9;&#9;&#9;&#9;&#9;// Name of the file to link.&#10; &#9;&#9;&#9;&#9;&#9;name = &#x22;&#x22;;&#10; &#9;&#9;&#9;&#10; &#9;&#9;&#9;// If the File passed is a directory and the paths is greater than &#10; &#9;&#9;&#9;// zero...&#10; &#9;&#9;&#9;if(directory.isDirectory() && paths.length > 0)&#10; &#9;&#9;&#9;{&#10; &#9;&#9;&#9;&#9;// Get folder path from file.&#10; &#9;&#9;&#9;&#9;directory_path = directory.getAbsolutePath();&#10; &#9;&#9;&#9;&#9;// Iterate over paths to create links from...&#10; &#9;&#9;&#9;&#9;for(String path : paths)&#10; &#9;&#9;&#9;&#9;&#9;try&#10; &#9;&#9;&#9;&#9;&#9;{&#10; &#9;&#9;&#9;&#9;&#9;&#9;// Get name of file to link.&#10; &#9;&#9;&#9;&#9;&#9;&#9;name = path.substring(path.lastIndexOf(&#x22;\&#x22;));&#10; &#9;&#9;&#9;&#9;&#9;&#9;// Parse together command.&#10; &#9;&#9;&#9;&#9;&#9;&#9;joined_path_command = command + directory_path+name+&#x22;&#x22; &#x22;&#x22; + path + &#x22;&#x22;&#x22;;&#10; &#9;&#9;&#9;&#9;&#9;&#9;// Execute command to create hard/soft link.&#10; &#9;&#9;&#9;&#9;&#9;&#9;Runtime.getRuntime().exec(new String[]{&#x22;cmd.exe&#x22;, &#x22;/c&#x22;,joined_path_command});&#10; &#9;&#9;&#9;&#9;&#9;}&#10; &#9;&#9;&#9;&#9;&#9;catch (Exception e)&#10; &#9;&#9;&#9;&#9;&#9;{&#10; &#9;&#9;&#9;&#9;&#9;&#9;// TODO Auto-generated catch block&#10; &#9;&#9;&#9;&#9;&#9;&#9;e.printStackTrace();&#10; &#9;&#9;&#9;&#9;&#9;}&#10; &#9;&#9;&#9;&#9;&#10; &#9;&#9;&#9;&#9;// Show message at the end showing completion.&#10; &#9;&#9;&#9;&#9;JOptionPane.showMessageDialog(null, paths.length + &#x22; paths processed.&#x22;, &#x22;Completed&#x22;, JOptionPane.INFORMATION_MESSAGE);&#10; &#9;&#9;&#9;}&#10; &#9;&#9;}&#10; &#9;}&#10; </pre></div><br><a href="#index">back to index</a><br><br></body>
	<tags>Java, Engineering, Windows, Graphic Design</tags>
</project>